[
["index.html", "Environmental Informatics Using Research Infrastructures and their Data Preface Acknowledgements", " Environmental Informatics Using Research Infrastructures and their Data Dr. Katharyn Duffy, Dr. Ben Ruddell Preface This textbook provides an introduction to environmental and ecological informatics in the context of “big science”- that is, in the context of research infrastructures and observatories that collect and publish reams of observations and derived data products about the earth and its environment. The reader will learn how to make use of environmental infrastructures’ data products. This textbook introduces a framework of learning outcomes that covers the broad context of these data products that is necessary to make proper use of the information: The infrastructure’s organizational structure and scientific scope; Instrumentation, quality control, metadata, data catalogs, API’s, and data products; Key references, key tutorials, and informatics best practices; Professional career tracks in informatics; This textbook is intended primarily for graduate students enrolled in computer science and informatics programs but engaged in studies and research on environmental and geoscience topics- with a special emphasis on ecological topics. Advanced undergraduates and other graduate students enrolled in STEM programs may also be well-served if they have a strong background in programming and computing. Additionally, professional scientists may find this textbook useful as a reference and as a training manual when they encounter the need to make use of the research infrastructures and data that are directly covered by the book’s content- or find the need to train a junior scientist on the use of these infrastructures’ data. The scope of the infrastructures and data products is mostly U.S. focused in this edition, but some of these infrastructures have a global reach, and the material is almost as useful for students in other countries as for U.S. students. The textbook can be tackled one unit at a time as a lab manual within a university course, or- in its intended application- a standard semester-long three-credit-hour graduate course should be offered to cover the entire textbook from start to finish. Digital supplements are provided with examples of successful projects. Efforts have been made to select activities using data products, software, and tools that are relatively mature and stable. Even so, because this textbook covers a rapidly moving field, portions will, unfortunately, become dated quickly. It is the authors’ intent to release frequent editions that update and expand the material to keep pace with the rapid development of our field. Informatics is arguably the key scientific discipline of the 21st century, and research infrastructures are the source of the raw natural resource fueling the informatics revolution: observational data. Most 21st century scientists and scientific staff will spend their careers immersed in the data revolution. We sincerely hope that this textbook provides the launchpad you need for your career or for your next project in environmental science. Acknowledgements This first version of the textbook was developed to offer INF550, a graduate course in the School of Informatics Computing and Cyber Systems at Northern Arizona University in Fall 2020, with funding and leadership from the National Science Foundation funded National Research Traineeship “T3” option in Ecological and Environmental Informatics within a PhD program in Informatics and Computing (NRT-HDR #1829075, PI’s Ogle, Barber, Richardson, Ruddell, and Sankey). Our research infrastructure partners were critical to the creation of the material. Our partners at NEON - Battelle deserve special gratitude for anchoring the project. The opinions expressed are those of the researchers, and not necessarily the funding agencies. Special thanks to Megan Jones and Donal O’Leary at NEON-Battelle for their support in pulling NEON materials. Key Contributors Alphabetized by organization, then last name Alycia Crall, NEON - Battelle Megan Jones, NEON - Battelle Hank Loescher, NEON - Battelle Paula Mabee, NEON - Battelle Donal O’Leary, NEON - Battelle Andrew Richardson, PhenoCam - NAU Bijan Seyednasrollah, PhenoCam - NAU Theresa Crimmons, USA-NPN Kathy Gerst, USA-NPN Lee Marsh, USA-NPN "],
["ecoinformatics-tools.html", "Chapter 1 Ecoinformatics Tools 1.1 Pre-Course Skills &amp; Setup 1.2 Linux R/RStudio Setup 1.3 Installing and Setting up Git &amp; Github on Your Machine 1.4 Installing Atom 1.5 Linking RStudio to Git 1.6 How we will be Conducting this Course", " Chapter 1 Ecoinformatics Tools As an Ecoinformatician you need to be able to: Pull data from Application Programing Interfaces (APIs) More on this in Chapter 2 Organize and document your code and data Version control your code to avoid disaster and make it reproducible For you, your collaborators, and/or the wider community Push your code up to public-facing repositories Pull other’s code from public repositories. More thoughts on the benefits and power of reproducibility can be found here To be successful, both in this course and in your careers you will need these skills. This is why they are a requirement for this course. If you are already using these skills on a daily basis, fantastic! If you don’t feel that you have mastery in the workflows listed above I have placed lesson links throughout this chapter so that you can build these skills and be successful in this course. 1.1 Pre-Course Skills &amp; Setup For the purpose of this course we will largely be using the following tools to access, pull, and explore data: R &amp; Rstudio Git, GitHub, &amp; Atom.io Markdown &amp; Rmarkdown As such we will need to install and/or update these tools on your personal computer before our first day of class. While we chose R for this course, nearly all of the packages and data are fully available and transferable to Python or other languages. If you’d like to brush up on your R skills I highly recommend Data Carpentry Boostcamp’s free R for Reproducible Scientific Analysis course. 1.1.1 Installing or Updating R Please check your version of R. You will need R 3.6.0+ How to check your version in R or RStudio if you already have it: &gt; version _ platform x86_64-apple-darwin15.6.0 arch x86_64 os darwin15.6.0 system x86_64, darwin15.6.0 status major 3 minor 5.1 year 2018 month 07 day 02 svn rev 74947 language R version.string R version 3.5.1 (2018-07-02) nickname Feather Spray If you don’t already have R or need to update it do so here. 1.1.2 Windows R/RStudio Setup After you have downloaded R, run the .exe file that was just downloaded Go to the RStudio Download page Under Installers select RStudio X.XX.XXX - e.g. Windows Vista/7/8/10 Double click the file to install it Once R and RStudio are installed, click to open RStudio. If you don’t get any error messages you are set. If there is an error message, you will need to re-install the program. 1.1.3 Mac R/RStudio Setup After you have downloaded R, double click on the file that was downloaded and R will install Go to the RStudio Download page Under Installers select RStudio 1.2.1135 - Mac OS X XX.X (64-bit) to download it. Once it’s downloaded, double click the file to install it. Once R and RStudio are installed, click to open RStudio. If you don’t get any error messages you are set. If there is an error message, you will need to re-install the program. 1.2 Linux R/RStudio Setup R is available through most Linux package managers. You can download the binary files for your distribution from CRAN. Or you can use your package manager. e.g. for Debian/Ubuntu run sudo apt-get install r-base and for Fedora run sudo yum install R To install RStudio, go to the RStudio Download page Under Installers select the version for your distribution. Once it’s downloaded, double click the file to install it Once R and RStudio are installed, click to open RStudio. If you don’t get any error messages you are set. If there is an error message, you will need to re-install the program. 1.2.1 Install basic packages for this course You can run the following script to make sure all the required packages are properly installed on your computer. # list of required packages list.of.packages &lt;- c( &#39;data.table&#39;, &#39;tidyverse&#39;, &#39;jsonlite&#39;, &#39;jpeg&#39;, &#39;png&#39;, &#39;raster&#39;, &#39;rgdal&#39;, &#39;rmarkdown&#39;, &#39;knitr&#39; ) # identify new (not installed) packages new.packages &lt;- list.of.packages[!(list.of.packages %in% installed.packages()[,&quot;Package&quot;])] # install new (not installed) packages if(length(new.packages)) install.packages(new.packages, repos=&#39;http://cran.rstudio.com/&#39;) # load all of the required libraries sapply(list.of.packages, library, character.only = T) Note: On some operating systems, you may need to install the Geospatial Data Abstraction Library (GDAL). More information about GDAL can be found from here. 1.3 Installing and Setting up Git &amp; Github on Your Machine For this course you will need: 1. Git installed on your local machine 2. Very basic bash scripting 3. A linked GitHub account 4. To link RStudio to git via RStudio or Atom.io As we will be using these skills constantly, they are a pre-requisite for this course. If you don’t yet have these skills it’s okay! You can learn everything that you need to know via the following freely available resources: The Unix Shell Version Control with Git Happy Git with R If you are learning these skills from scratch I estimate that you will need to devote ~4-6 hours to get set up and comfortable with the various workflows. Also remember that I have code office hours every week and that Stack Exchange is your friend. 1.4 Installing Atom Atom.io is a powerful and useful text editor for the follwng reasons: It is langugae agnostic It fully integrates with git and github + You can use it to push/pull/resolve conflicts and write code all in one space. 1.5 Linking RStudio to Git Happy Git with R has a fantastic tutorial to help you link Rstudio-Git-Github on your local machine and push/pull from or to public repositories. 1.6 How we will be Conducting this Course At the end of each chapter you will find a set of Exercises. At the end of the assigned chapter you will be expected to submit via BBLearn two files: 1. An RMarkdown file with the naming convention: LASTNAME_COURSECODE_Section#.Rmd, and 2. A knitted .PDF with the same naming convention: LASTNAME_COURSECODE_Section#.pdf To generate these files you have two options: Click on the pencil and pad logo in the top of this text, copy the exercise section code, and drop it into your own .Rmd. Git clone our course Github Repository, navigate to the ’_Exercises’ folder, and use that .Rmd as a template. Note: Exercises submited in any other format, or those missing questions will not be graded To generate your .PDF to upload, in your RMarkdown file simply push the ‘Knit’ button at the top of your document. "],
["introduction-to-neon-its-data.html", "Chapter 2 Introduction to NEON &amp; its Data 2.1 Learning Objectives 2.2 The NEON Project Mission &amp; Design 2.3 The Science and Design of NEON 2.4 NEON’s Spatial Design 2.5 How NEON Collects Data 2.6 Accessing NEON Data 2.7 Hands on: Accessing NEON Data 2.7.1 Additional Resources 2.8 Get a NEON API Token 2.9 Use API token in neonUtilities 2.10 Token management for open code 2.11 Option 1: Save token in a local file 2.12 Option 2: Save token to the R environment 2.13 What is an API? 2.14 Stacking NEON data 2.15 Exercises", " Chapter 2 Introduction to NEON &amp; its Data Estimated Time: 2 hours Course participants: As you review this information, please consider the final course project that you will work on the over this semester. At the end of this section, you will document an initial research question or idea and associated data needed to address that question, that you may want to explore while pursuing this course. 2.1 Learning Objectives At the end of this activity, you will be able to: Explain the mission of the National Ecological Observatory Network (NEON). Explain the how sites are located within the NEON project design. Explain the different types of data that will be collected and provided by NEON. 2.2 The NEON Project Mission &amp; Design To capture ecological heterogeneity across the United States, NEON’s design divides the continent into 20 statistically different eco-climatic domains. Each NEON field site is located within an eco-climatic domain. 2.3 The Science and Design of NEON To gain a better understanding of the broad scope of NEON watch this 4 minute long video. Please, read the following page about NEON’s mission. 2.4 NEON’s Spatial Design Watch this 4:22 minute video exploring the spatial design of NEON field sites. Please read the following page about NEON’s Spatial Design: Read this primer on NEON’s Sampling Design Read about the different types of field sites - core and relocatable 2.4.1 NEON Field Site Locations Explore the NEON Field Site map taking note of the locations of Aquatic &amp; terrestrial field sites. Core &amp; relocatable field sites. Click here to view the NEON Field Site Map Explore the NEON field site map. Do the following: Zoom in on a study area of interest to see if there are any NEON field sites that are nearby. Click the “More” button in the upper right hand corner of the map to filter sites by name, site host, domain or state. Select one field site of interest. Click on the marker in the map. Then click on the name of the field site to jump to the field site landing page. Data Tip: You can download maps, kmz, or shapefiles of the field sites here. 2.5 How NEON Collects Data Watch this 3:06 minute video exploring the data that NEON collects. Read the Data Collection Methods page to learn more about the different types of data that NEON collects and provides. Then, follow the links below to learn more about each collection method: Aquatic Observation System (AOS) Aquatic Instrument System (AIS) Terrestrial Instrument System (TIS) – Flux Tower Terrestrial Instrument System (TIS) – Soil Sensors and Measurements Terrestrial Organismal System (TOS) Airborne Observation Platform (AOP) All data collection protocols and processing documents are publicly available. Read more about the standardized protocols and how to access these documents. 2.5.1 Specimens &amp; Samples NEON also collects samples and specimens from which the other data products are based. These samples are also available for research and education purposes. Learn more: NEON Biorepository. 2.5.2 Airborne Remote Sensing Watch this 5 minute video to better understand the NEON Airborne Observation Platform (AOP). Data Tip: NEON also provides support to your own research including proposals to fly the AOP over other study sites, a mobile tower/instrumentation setup and others. Learn more here the Assignable Assets programs . 2.6 Accessing NEON Data NEON data are processed and go through quality assurance quality control checks at NEON headquarters in Boulder, CO. NEON carefully documents every aspect of sampling design, data collection, processing and delivery. This documentation is freely available through the NEON data portal. Visit the NEON Data Portal - data.neonscience.org Read more about the quality assurance and quality control processes for NEON data and how the data are processed from raw data to higher level data products. Explore NEON Data Products. On the page for each data product in the catalog you can find the basic information about the product, find the data collection and processing protocols, and link directly to downloading the data. Additionally, some types of NEON data are also available through the data portals of other organizations. For example, NEON Terrestrial Insect DNA Barcoding Data is available through the Barcode of Life Datasystem (BOLD). Or NEON phenocam images are available from the Phenocam network site. More details on where else the data are available from can be found in the Availability and Download section on the Product Details page for each data product (visit Explore Data Products to access individual Product Details pages). 2.6.1 Pathways to access NEON Data There are several ways to access data from NEON: Via the NEON data portal. Explore and download data. Note that much of the tabular data is available in zipped .csv files for each month and site of interest. To combine these files, use the neonUtilities package (R tutorial, Python tutorial). Use R or Python to programmatically access the data. NEON and community members have created code packages to directly access the data through an API. Learn more about the available resources by reading the Code Resources page or visiting the NEONScience GitHub repo. Using the NEON API. Access NEON data directly using a custom API call. Access NEON data through partner’s portals. Where NEON data directly overlap with other community resources, NEON data can be accessed through the portals. Examples include Phenocam, BOLD, Ameriflux, and others. You can learn more in the documentation for individual data products. 2.7 Hands on: Accessing NEON Data 2.7.1 Via a NEON API Token NEON data can be downloaded from either the NEON Data Portal or the NEON API. When downloading from the Data Portal, you can create a user account. Read about the benefits of an account on the User Account page. You can also use your account to create a token for using the API. Your token is unique to your account, so don’t share it. While using a token is optional in general, it is required for this course. Using a token when downloading data via the API, including when using the neonUtilities package, links your downloads to your user account, as well as enabling faster download speeds. For more information about token usage and benefits, see the NEON API documentation page. For now, in addition to faster downloads, using a token helps NEON to track data downloads. Using anonymized user information, they can then calculate data access statistics, such as which data products are downloaded most frequently, which data products are downloaded in groups by the same users, and how many users in total are downloading data. This information helps NEON to evaluate the growth and reach of the observatory, and to advocate for training activities, workshops, and software development. Tokens can be used whenever you use the NEON API. In this tutorial, we’ll focus on using tokens with the neonUtilities R package. 2.7.1 Objectives After completing this section, you will be able to: Create a NEON API token Use your token when downloading data with neonUtilities 2.7.1 Things You’ll Need To Complete This Tutorial You will need a version of R (3.4.1 or higher) and, preferably, RStudio loaded on your computer to complete this tutorial. 2.7.1 Install R Packages neonUtilities: install.packages(&quot;neonUtilities&quot;) 2.7.1 Additional Resources NEON Data Portal NEONScience GitHub Organization neonUtilities tutorial If you’ve never downloaded NEON data using the neonUtilities package before, we recommend starting with the Download and Explore tutorial before proceeding with this tutorial. In the next sections, we’ll get an API token from the NEON Data Portal, and then use it in neonUtilities when downloading data. 2.8 Get a NEON API Token The first step is create a NEON user account, if you don’t have one. Follow the instructions on the Data Portal User Accounts page. If you do already have an account, go to the NEON Data Portal, sign in, and go to your My Account profile page. Once you have an account, you can create an API token for yourself. At the bottom of the My Account page, you should see this bar: Click the ‘GET API TOKEN’ button. After a moment, you should see this: Click on the Copy button to copy your API token to the clipboard. 2.9 Use API token in neonUtilities In the next section, we’ll walk through saving your token somewhere secure but accessible to your code. But first let’s try out using the token the easy way. First, we need to load the neonUtilities package and set the working directory: # install neonUtilities - can skip if already installed, but # API tokens are only enabled in neonUtilities v1.3.4 and higher # if your version number is lower, re-install install.packages(&quot;neonUtilities&quot;) # load neonUtilities library(neonUtilities) # set working directory wd &lt;- &quot;~/data&quot; # this will depend on your local machine setwd(wd) NEON API tokens are very long, so it would be annoying to keep pasting the entire text string into functions. Assign your token an object name: NEON_TOKEN &lt;- &quot;PASTE YOUR TOKEN HERE&quot; Now we’ll use the loadByProduct() function to download data. Your API token is entered as the optional token input parameter. For this example, we’ll download Plant foliar traits (DP1.10026.001). foliar &lt;- loadByProduct(dpID=&quot;DP1.10026.001&quot;, site=&quot;all&quot;, package=&quot;expanded&quot;, check.size=F, token=NEON_TOKEN) You should now have data saved in the foliar object; the API silently used your token. If you’ve downloaded data without a token before, you may notice this is faster! This format applies to all neonUtilities functions that involve downloading data or otherwise accessing the API; you can use the token input with all of them. For example, when downloading remote sensing data: chm &lt;- byTileAOP(dpID=&quot;DP3.30015.001&quot;, site=&quot;WREF&quot;, year=2017, check.size=F, easting=c(571000,578000), northing=c(5079000,5080000), savepath=wd, token=NEON_TOKEN) 2.10 Token management for open code Your API token is unique to your account, so don’t share it! If you’re writing code that will be shared with colleagues or available publicly, such as in a GitHub repository or supplemental materials of a published paper, you can’t include the line of code above where we assigned your token to NEON_TOKEN, since your token is fully visible in the code there. Instead, you’ll need to save your token locally on your computer, and pull it into your code without displaying it. There are a few ways to do this, we’ll show two options here. Option 1: Save the token in a local file, and source() that file at the start of every script. This is fairly simple but requires a line of code in every script. Option 2: Add the token to a .Renviron file to create an environment variable that gets loaded when you open R. This is a little harder to set up initially, but once it’s done, it’s done globally, and it will work in every script you run. 2.11 Option 1: Save token in a local file Open a new, empty R script (.R). Put a single line of code in the script: NEON_TOKEN &lt;- &quot;PASTE YOUR TOKEN HERE&quot; Save this file in a logical place on your machine, somewhere that won’t be visible publicly. Here, let’s call the file neon_token_source.R, and save it to the working directory. Then, at the start of every script where you’re going to use the NEON API, you would run this line of code: source(paste0(wd, &quot;/neon_token_source.R&quot;)) Then you’ll be able to use token=NEON_TOKEN when you run neonUtilities functions, and you can share your code without accidentally sharing your token. 2.12 Option 2: Save token to the R environment To create a persistent environment variable, we use a .Renviron file. Before creating a file, check which directory R is using as your home directory: # For Windows: Sys.getenv(&quot;R_USER&quot;) # For Mac/Linux: Sys.getenv(&quot;HOME&quot;) Check the home directory to see if you already have a .Renviron file, using the file browse pane in RStudio, or using another file browse method with hidden files shown. Files that begin with . are hidden by default, but RStudio recognizes files that begin with .R and displays them. &lt;a href=&quot;{{ site.baseurl }}/images/NEON-api-token/R-environ-file-browse.png&quot;&gt; &lt;img src=&quot;{{ site.baseurl }}/images/NEON-api-token/R-environ-file-browse.png&quot; alt=&quot;File browse pane in RStudio showing .Renviron file.&quot;&gt;&lt;/a&gt; &lt;figcaption&gt;Screenshot of file browse pane with .Renviron file. &lt;/figcaption&gt; If you already have a .Renviron file, open it and follow the instructions below to add to it. If you don’t have one, create one using File -&gt; New File -&gt; Text File in the RStudio menus. Add one line to the text file. In this option, there are no quotes around the token value. NEON_TOKEN=PASTE YOUR TOKEN HERE Save the file as .Renviron, in the RStudio home directory identified above. Double check the spelling, this will not work if you have a typo. Re-start R to load the environment. Once your token is assigned to an environment variable, use the function Sys.getenv() to access it. For example, in loadByProduct(): foliar &lt;- loadByProduct(dpID=&quot;DP1.10026.001&quot;, site=&quot;all&quot;, package=&quot;expanded&quot;, check.size=F, token=Sys.getenv(&quot;NEON_TOKEN&quot;)) 2.12.1 Part 2: Pulling NEON Data via the API This is a tutorial in pulling data from the NEON API or Application Programming Interface. The tutorial uses R and the R package httr, but the core information about the API is applicable to other languages and approaches. As a reminder, there are 3 basic categories of NEON data: Observational - Data collected by a human in the field, or in an analytical laboratory, e.g. beetle identification, foliar isotopes Instrumentation - Data collected by an automated, streaming sensor, e.g. net radiation, soil carbon dioxide Remote sensing - Data collected by the airborne observation platform, e.g. LIDAR, surface reflectance This lab covers all three types of data, it is required to complete these sections in order and not skip ahead, since the query principles are explained in the first section, on observational data. 2.12.1 Objectives After completing this activity, you will be able to: Pull observational, instrumentation, and geolocation data from the NEON API. Transform API-accessed data from JSON to tabular format for analyses. 2.12.1 Things You’ll Need To Complete This Tutorial To complete this tutorial you will need the most current version of R and, preferably, RStudio loaded on your computer. 2.12.1 Install R Packages httr: install.packages(&quot;httr&quot;) jsonlite: install.packages(&quot;jsonlite&quot;) dplyr: install.packages(&quot;dplyr&quot;) devtools: install.packages(&quot;devtools&quot;) downloader: install.packages(&quot;downloader&quot;) geoNEON: devtools::install_github(&quot;NEONScience/NEON-geolocation/geoNEON&quot;) neonUtilities: devtools::install_github(&quot;NEONScience/NEON-utilities/neonUtilities&quot;) Note, you must have devtools installed &amp; loaded, prior to loading geoNEON or neonUtilities. 2.12.1 Additional Resources Webpage for the NEON API GitHub repository for the NEON API ROpenSci wrapper for the NEON API (not covered in this tutorial) 2.13 What is an API? If you are unfamiliar with the concept of an API, think of an API as a ‘middle person’ that provides a communication path for a software application to obtain information from a digital data source. APIs are becoming a very common means of sharing digital information. Many of the apps that you use on your computer or mobile device to produce maps, charts, reports, and other useful forms of information pull data from multiple sources using APIs. In the ecological and environmental sciences, many researchers use APIs to programmatically pull data into their analyses. (Quoted from the NEON Observatory Blog story: API and data availability viewer now live on the NEON data portal.) 2.13.1 Anatomy of an API call An example API call: http://data.neonscience.org/api/v0/data/DP1.10003.001/WOOD/2015-07 This includes the base URL, endpoint, and target. 2.13.1.1 Base URL: http://data.neonscience.org/api/v0/data/DP1.10003.001/WOOD/2015-07 Specifics are appended to this in order to get the data or metadata you’re looking for, but all calls to this API will include the base URL. For the NEON API, this is http://data.neonscience.org/api/v0 – not clickable, because the base URL by itself will take you nowhere! 2.13.1.2 Endpoints: http://data.neonscience.org/api/v0/data/DP1.10003.001/WOOD/2015-07 What type of data or metadata are you looking for? ~/products Information about one or all of NEON’s data products ~/sites Information about data availability at the site specified in the call ~/locations Spatial data for the NEON locations specified in the call ~/data Data! By product, site, and date (in monthly chunks). 2.13.2 Targets: http://data.neonscience.org/api/v0/data/DP1.10003.001/WOOD/2015-07 The specific data product, site, or location you want to get data for. 2.13.3 Observational data (OS) Which product do you want to get data for? Consult the Explore Data Products page. We’ll pick Breeding landbird point counts, DP1.10003.001 First query the products endpoint of the API to find out which sites and dates have data available. In the products endpoint, the target is the numbered identifier for the data product: # Load the necessary libraries library(httr) library(jsonlite) ## Warning: package &#39;jsonlite&#39; was built under R version 3.6.2 library(dplyr, quietly=T) ## Warning: package &#39;dplyr&#39; was built under R version 3.6.2 ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union library(downloader) # Request data using the GET function &amp; the API call req &lt;- GET(&quot;http://data.neonscience.org/api/v0/products/DP1.10003.001&quot;) req ## Response [https://data.neonscience.org/api/v0/products/DP1.10003.001] ## Date: 2020-08-05 21:06 ## Status: 200 ## Content-Type: application/json;charset=UTF-8 ## Size: 24.2 kB The object returned from GET() has many layers of information. Entering the name of the object gives you some basic information about what you downloaded. The content() function returns the contents in the form of a highly nested list. This is typical of JSON-formatted data returned by APIs. We can use the names() function to view the different types of information within this list. # View requested data req.content &lt;- content(req, as=&quot;parsed&quot;) names(req.content$data) ## [1] &quot;productCodeLong&quot; &quot;productCode&quot; ## [3] &quot;productCodePresentation&quot; &quot;productName&quot; ## [5] &quot;productDescription&quot; &quot;productStatus&quot; ## [7] &quot;productCategory&quot; &quot;productHasExpanded&quot; ## [9] &quot;productScienceTeamAbbr&quot; &quot;productScienceTeam&quot; ## [11] &quot;productPublicationFormatType&quot; &quot;productAbstract&quot; ## [13] &quot;productDesignDescription&quot; &quot;productStudyDescription&quot; ## [15] &quot;productBasicDescription&quot; &quot;productExpandedDescription&quot; ## [17] &quot;productSensor&quot; &quot;productRemarks&quot; ## [19] &quot;themes&quot; &quot;changeLogs&quot; ## [21] &quot;specs&quot; &quot;keywords&quot; ## [23] &quot;siteCodes&quot; You can see all of the infoamtion by running the line print(req.content), but this will result in a very long printout in your console. Instead, you can view list items individually. Here, we highlight a couple of interesting examples: # View Abstract req.content$data$productAbstract ## [1] &quot;This data product contains the quality-controlled, native sampling resolution data from NEON&#39;s breeding landbird sampling. Breeding landbirds are defined as “smaller birds (usually exclusive of raptors and upland game birds) not usually associated with aquatic habitats” (Ralph et al. 1993). The breeding landbird point counts product provides records of species identification of all individuals observed during the 6-minute count period, as well as metadata which can be used to model detectability, e.g., weather, distances from observers to birds, and detection methods. The NEON point count method is adapted from the Integrated Monitoring in Bird Conservation Regions (IMBCR): Field protocol for spatially-balanced sampling of landbird populations (Hanni et al. 2017; http://bit.ly/2u2ChUB). For additional details, see the user guide, protocols, and science design listed in the Documentation section in [this data product&#39;s details webpage](https://data.neonscience.org/data-products/DP1.10003.001). \\n\\nLatency:\\nThe expected time from data and/or sample collection in the field to data publication is as follows, for each of the data tables (in days) in the downloaded data package. See the Data Product User Guide for more information.\\n \\nbrd_countdata: 120\\n\\nbrd_perpoint: 120\\n\\nbrd_personnel: 120\\n\\nbrd_references: 120&quot; # View Available months and associated URLs for Onaqui, Utah - ONAQ req.content$data$siteCodes[[27]] ## $siteCode ## [1] &quot;ONAQ&quot; ## ## $availableMonths ## $availableMonths[[1]] ## [1] &quot;2017-05&quot; ## ## $availableMonths[[2]] ## [1] &quot;2018-05&quot; ## ## $availableMonths[[3]] ## [1] &quot;2018-06&quot; ## ## $availableMonths[[4]] ## [1] &quot;2019-05&quot; ## ## ## $availableDataUrls ## $availableDataUrls[[1]] ## [1] &quot;https://data.neonscience.org/api/v0/data/DP1.10003.001/ONAQ/2017-05&quot; ## ## $availableDataUrls[[2]] ## [1] &quot;https://data.neonscience.org/api/v0/data/DP1.10003.001/ONAQ/2018-05&quot; ## ## $availableDataUrls[[3]] ## [1] &quot;https://data.neonscience.org/api/v0/data/DP1.10003.001/ONAQ/2018-06&quot; ## ## $availableDataUrls[[4]] ## [1] &quot;https://data.neonscience.org/api/v0/data/DP1.10003.001/ONAQ/2019-05&quot; To get a more accessible view of which sites have data for which months, you’ll need to extract data from the nested list. There are a variety of ways to do this, in this tutorial we’ll explore a couple of them. Here we’ll use fromJSON(), in the jsonlite package, which doesn’t fully flatten the nested list, but gets us the part we need. To use it, we need a text version of the content. The text version is not as human readable but is readable by the fromJSON() function. # make this JSON readable -&gt; &quot;text&quot; req.text &lt;- content(req, as=&quot;text&quot;) # Flatten data frame to see available data. avail &lt;- jsonlite::fromJSON(req.text, simplifyDataFrame=T, flatten=T) avail ## $data ## $data$productCodeLong ## [1] &quot;NEON.DOM.SITE.DP1.10003.001&quot; ## ## $data$productCode ## [1] &quot;DP1.10003.001&quot; ## ## $data$productCodePresentation ## [1] &quot;NEON.DP1.10003&quot; ## ## $data$productName ## [1] &quot;Breeding landbird point counts&quot; ## ## $data$productDescription ## [1] &quot;Count, distance from observer, and taxonomic identification of breeding landbirds observed during point counts&quot; ## ## $data$productStatus ## [1] &quot;ACTIVE&quot; ## ## $data$productCategory ## [1] &quot;Level 1 Data Product&quot; ## ## $data$productHasExpanded ## [1] TRUE ## ## $data$productScienceTeamAbbr ## [1] &quot;TOS&quot; ## ## $data$productScienceTeam ## [1] &quot;Terrestrial Observation System (TOS)&quot; ## ## $data$productPublicationFormatType ## [1] &quot;TOS Data Product Type&quot; ## ## $data$productAbstract ## [1] &quot;This data product contains the quality-controlled, native sampling resolution data from NEON&#39;s breeding landbird sampling. Breeding landbirds are defined as “smaller birds (usually exclusive of raptors and upland game birds) not usually associated with aquatic habitats” (Ralph et al. 1993). The breeding landbird point counts product provides records of species identification of all individuals observed during the 6-minute count period, as well as metadata which can be used to model detectability, e.g., weather, distances from observers to birds, and detection methods. The NEON point count method is adapted from the Integrated Monitoring in Bird Conservation Regions (IMBCR): Field protocol for spatially-balanced sampling of landbird populations (Hanni et al. 2017; http://bit.ly/2u2ChUB). For additional details, see the user guide, protocols, and science design listed in the Documentation section in [this data product&#39;s details webpage](https://data.neonscience.org/data-products/DP1.10003.001). \\n\\nLatency:\\nThe expected time from data and/or sample collection in the field to data publication is as follows, for each of the data tables (in days) in the downloaded data package. See the Data Product User Guide for more information.\\n \\nbrd_countdata: 120\\n\\nbrd_perpoint: 120\\n\\nbrd_personnel: 120\\n\\nbrd_references: 120&quot; ## ## $data$productDesignDescription ## [1] &quot;Depending on the size of the site, sampling for this product occurs either at either randomly distributed individual points or grids of nine points each. At larger sites, point count sampling occurs at five to fifteen 9-point grids, with grid centers collocated with distributed base plot centers (where plant, beetle, and/or soil sampling may also occur), if possible. At smaller sites (i.e., sites that cannot accommodate a minimum of 5 grids) point counts occur at the southwest corner (point 21) of 5-25 distributed base plots. Point counts are conducted once per breeding season at large sites and twice per breeding season at smaller sites. Point counts are six minutes long, with each minute tracked by the observer, following a two-minute settling-in period. All birds are recorded to species and sex, whenever possible, and the distance to each individual or flock is measured with a laser rangefinder, except in the case of flyovers.&quot; ## ## $data$productStudyDescription ## [1] &quot;This sampling occurs at all NEON terrestrial sites.&quot; ## ## $data$productBasicDescription ## [1] &quot;The basic package contains the per point metadata table that includes data pertaining to the observer and the weather conditions and the count data table that includes all of the observational data.&quot; ## ## $data$productExpandedDescription ## [1] &quot;The expanded package includes two additional tables and two additional fields within the count data table. The personnel table provides institutional information about each observer, as well as their performance on identification quizzes, where available. The references tables provides the list of resources used by an observer to identify birds. The additional fields in the countdata table are family and nativeStatusCode, which are derived from the NEON master list of birds.&quot; ## ## $data$productSensor ## NULL ## ## $data$productRemarks ## [1] &quot;Queries for this data product will return data collected during the date range specified for `brd_perpoint` and `brd_countdata`, but will return data from all dates for `brd_personnel` (quiz scores may occur over time periods which are distinct from when sampling occurs) and `brd_references` (which apply to a broad range of sampling dates). A record from `brd_perPoint` should have 6+ child records in `brd_countdata`, at least one per pointCountMinute. Duplicates or missing data may exist where protocol and/or data entry aberrations have occurred; users should check data carefully for anomalies before joining tables. Taxonomic IDs of species of concern have been &#39;fuzzed&#39;; see data package readme files for more information.&quot; ## ## $data$themes ## [1] &quot;Organisms, Populations, and Communities&quot; ## ## $data$changeLogs ## NULL ## ## $data$specs ## specId specNumber ## 1 3656 NEON.DOC.000916vC ## 2 2565 NEON_bird_userGuide_vA ## 3 3729 NEON.DOC.014041vJ ## ## $data$keywords ## [1] &quot;vertebrates&quot; &quot;birds&quot; ## [3] &quot;diversity&quot; &quot;taxonomy&quot; ## [5] &quot;community composition&quot; &quot;distance sampling&quot; ## [7] &quot;avian&quot; &quot;species composition&quot; ## [9] &quot;population&quot; &quot;Aves&quot; ## [11] &quot;Chordata&quot; &quot;point counts&quot; ## [13] &quot;landbirds&quot; &quot;invasive&quot; ## [15] &quot;introduced&quot; &quot;native&quot; ## [17] &quot;animals&quot; &quot;Animalia&quot; ## ## $data$siteCodes ## siteCode ## 1 ABBY ## 2 BARR ## 3 BART ## 4 BLAN ## 5 BONA ## 6 CLBJ ## 7 CPER ## 8 DCFS ## 9 DEJU ## 10 DELA ## 11 DSNY ## 12 GRSM ## 13 GUAN ## 14 HARV ## 15 HEAL ## 16 JERC ## 17 JORN ## 18 KONA ## 19 KONZ ## 20 LAJA ## 21 LENO ## 22 MLBS ## 23 MOAB ## 24 NIWO ## 25 NOGP ## 26 OAES ## 27 ONAQ ## 28 ORNL ## 29 OSBS ## 30 PUUM ## 31 RMNP ## 32 SCBI ## 33 SERC ## 34 SJER ## 35 SOAP ## 36 SRER ## 37 STEI ## 38 STER ## 39 TALL ## 40 TEAK ## 41 TOOL ## 42 TREE ## 43 UKFS ## 44 UNDE ## 45 WOOD ## 46 WREF ## 47 YELL ## availableMonths ## 1 2017-05, 2017-06, 2018-06, 2018-07, 2019-05 ## 2 2017-07, 2018-07, 2019-06 ## 3 2015-06, 2016-06, 2017-06, 2018-06, 2019-06 ## 4 2017-05, 2017-06, 2018-05, 2018-06, 2019-05, 2019-06 ## 5 2017-06, 2018-06, 2018-07, 2019-06 ## 6 2017-05, 2018-04, 2019-04, 2019-05 ## 7 2013-06, 2015-05, 2016-05, 2017-05, 2017-06, 2018-05, 2019-06 ## 8 2017-06, 2017-07, 2018-07, 2019-06, 2019-07 ## 9 2017-06, 2018-06, 2019-06 ## 10 2015-06, 2017-06, 2018-05, 2019-06 ## 11 2015-06, 2016-05, 2017-05, 2018-05, 2019-05 ## 12 2016-06, 2017-05, 2017-06, 2018-05, 2019-05 ## 13 2015-05, 2017-05, 2018-05, 2019-05, 2019-06 ## 14 2015-05, 2015-06, 2016-06, 2017-06, 2018-06, 2019-06 ## 15 2017-06, 2018-06, 2018-07, 2019-06, 2019-07 ## 16 2016-06, 2017-05, 2018-06, 2019-06 ## 17 2017-04, 2017-05, 2018-04, 2018-05, 2019-04 ## 18 2018-05, 2018-06, 2019-06 ## 19 2017-06, 2018-05, 2018-06, 2019-06 ## 20 2017-05, 2018-05, 2019-05, 2019-06 ## 21 2017-06, 2018-05, 2019-06 ## 22 2018-06, 2019-05 ## 23 2015-06, 2017-05, 2018-05, 2019-05 ## 24 2015-07, 2017-07, 2018-07, 2019-07 ## 25 2017-07, 2018-07, 2019-07 ## 26 2017-05, 2017-06, 2018-04, 2018-05, 2019-05 ## 27 2017-05, 2018-05, 2018-06, 2019-05 ## 28 2016-05, 2016-06, 2017-05, 2018-06, 2019-05 ## 29 2016-05, 2017-05, 2018-05, 2019-05 ## 30 2018-04 ## 31 2017-06, 2017-07, 2018-06, 2018-07, 2019-06, 2019-07 ## 32 2015-06, 2016-05, 2016-06, 2017-05, 2017-06, 2018-05, 2018-06, 2019-05, 2019-06 ## 33 2017-05, 2017-06, 2018-05, 2019-05 ## 34 2017-04, 2018-04, 2019-04 ## 35 2017-05, 2018-05, 2019-05 ## 36 2017-05, 2018-04, 2018-05, 2019-04 ## 37 2016-05, 2016-06, 2017-06, 2018-05, 2018-06, 2019-05, 2019-06 ## 38 2013-06, 2015-05, 2016-05, 2017-05, 2018-05, 2019-05, 2019-06 ## 39 2015-06, 2016-07, 2017-06, 2018-06, 2019-05 ## 40 2017-06, 2018-06, 2019-06, 2019-07 ## 41 2017-06, 2018-07, 2019-06 ## 42 2016-06, 2017-06, 2018-06, 2019-06 ## 43 2017-06, 2018-06, 2019-06 ## 44 2016-06, 2016-07, 2017-06, 2018-06, 2019-06 ## 45 2015-07, 2017-07, 2018-07, 2019-06, 2019-07 ## 46 2018-06, 2019-05, 2019-06 ## 47 2018-06, 2019-06 ## availableDataUrls ## 1 https://data.neonscience.org/api/v0/data/DP1.10003.001/ABBY/2017-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/ABBY/2017-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/ABBY/2018-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/ABBY/2018-07, https://data.neonscience.org/api/v0/data/DP1.10003.001/ABBY/2019-05 ## 2 https://data.neonscience.org/api/v0/data/DP1.10003.001/BARR/2017-07, https://data.neonscience.org/api/v0/data/DP1.10003.001/BARR/2018-07, https://data.neonscience.org/api/v0/data/DP1.10003.001/BARR/2019-06 ## 3 https://data.neonscience.org/api/v0/data/DP1.10003.001/BART/2015-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/BART/2016-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/BART/2017-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/BART/2018-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/BART/2019-06 ## 4 https://data.neonscience.org/api/v0/data/DP1.10003.001/BLAN/2017-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/BLAN/2017-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/BLAN/2018-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/BLAN/2018-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/BLAN/2019-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/BLAN/2019-06 ## 5 https://data.neonscience.org/api/v0/data/DP1.10003.001/BONA/2017-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/BONA/2018-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/BONA/2018-07, https://data.neonscience.org/api/v0/data/DP1.10003.001/BONA/2019-06 ## 6 https://data.neonscience.org/api/v0/data/DP1.10003.001/CLBJ/2017-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/CLBJ/2018-04, https://data.neonscience.org/api/v0/data/DP1.10003.001/CLBJ/2019-04, https://data.neonscience.org/api/v0/data/DP1.10003.001/CLBJ/2019-05 ## 7 https://data.neonscience.org/api/v0/data/DP1.10003.001/CPER/2013-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/CPER/2015-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/CPER/2016-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/CPER/2017-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/CPER/2017-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/CPER/2018-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/CPER/2019-06 ## 8 https://data.neonscience.org/api/v0/data/DP1.10003.001/DCFS/2017-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/DCFS/2017-07, https://data.neonscience.org/api/v0/data/DP1.10003.001/DCFS/2018-07, https://data.neonscience.org/api/v0/data/DP1.10003.001/DCFS/2019-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/DCFS/2019-07 ## 9 https://data.neonscience.org/api/v0/data/DP1.10003.001/DEJU/2017-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/DEJU/2018-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/DEJU/2019-06 ## 10 https://data.neonscience.org/api/v0/data/DP1.10003.001/DELA/2015-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/DELA/2017-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/DELA/2018-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/DELA/2019-06 ## 11 https://data.neonscience.org/api/v0/data/DP1.10003.001/DSNY/2015-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/DSNY/2016-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/DSNY/2017-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/DSNY/2018-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/DSNY/2019-05 ## 12 https://data.neonscience.org/api/v0/data/DP1.10003.001/GRSM/2016-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/GRSM/2017-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/GRSM/2017-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/GRSM/2018-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/GRSM/2019-05 ## 13 https://data.neonscience.org/api/v0/data/DP1.10003.001/GUAN/2015-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/GUAN/2017-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/GUAN/2018-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/GUAN/2019-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/GUAN/2019-06 ## 14 https://data.neonscience.org/api/v0/data/DP1.10003.001/HARV/2015-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/HARV/2015-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/HARV/2016-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/HARV/2017-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/HARV/2018-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/HARV/2019-06 ## 15 https://data.neonscience.org/api/v0/data/DP1.10003.001/HEAL/2017-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/HEAL/2018-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/HEAL/2018-07, https://data.neonscience.org/api/v0/data/DP1.10003.001/HEAL/2019-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/HEAL/2019-07 ## 16 https://data.neonscience.org/api/v0/data/DP1.10003.001/JERC/2016-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/JERC/2017-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/JERC/2018-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/JERC/2019-06 ## 17 https://data.neonscience.org/api/v0/data/DP1.10003.001/JORN/2017-04, https://data.neonscience.org/api/v0/data/DP1.10003.001/JORN/2017-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/JORN/2018-04, https://data.neonscience.org/api/v0/data/DP1.10003.001/JORN/2018-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/JORN/2019-04 ## 18 https://data.neonscience.org/api/v0/data/DP1.10003.001/KONA/2018-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/KONA/2018-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/KONA/2019-06 ## 19 https://data.neonscience.org/api/v0/data/DP1.10003.001/KONZ/2017-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/KONZ/2018-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/KONZ/2018-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/KONZ/2019-06 ## 20 https://data.neonscience.org/api/v0/data/DP1.10003.001/LAJA/2017-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/LAJA/2018-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/LAJA/2019-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/LAJA/2019-06 ## 21 https://data.neonscience.org/api/v0/data/DP1.10003.001/LENO/2017-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/LENO/2018-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/LENO/2019-06 ## 22 https://data.neonscience.org/api/v0/data/DP1.10003.001/MLBS/2018-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/MLBS/2019-05 ## 23 https://data.neonscience.org/api/v0/data/DP1.10003.001/MOAB/2015-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/MOAB/2017-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/MOAB/2018-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/MOAB/2019-05 ## 24 https://data.neonscience.org/api/v0/data/DP1.10003.001/NIWO/2015-07, https://data.neonscience.org/api/v0/data/DP1.10003.001/NIWO/2017-07, https://data.neonscience.org/api/v0/data/DP1.10003.001/NIWO/2018-07, https://data.neonscience.org/api/v0/data/DP1.10003.001/NIWO/2019-07 ## 25 https://data.neonscience.org/api/v0/data/DP1.10003.001/NOGP/2017-07, https://data.neonscience.org/api/v0/data/DP1.10003.001/NOGP/2018-07, https://data.neonscience.org/api/v0/data/DP1.10003.001/NOGP/2019-07 ## 26 https://data.neonscience.org/api/v0/data/DP1.10003.001/OAES/2017-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/OAES/2017-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/OAES/2018-04, https://data.neonscience.org/api/v0/data/DP1.10003.001/OAES/2018-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/OAES/2019-05 ## 27 https://data.neonscience.org/api/v0/data/DP1.10003.001/ONAQ/2017-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/ONAQ/2018-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/ONAQ/2018-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/ONAQ/2019-05 ## 28 https://data.neonscience.org/api/v0/data/DP1.10003.001/ORNL/2016-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/ORNL/2016-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/ORNL/2017-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/ORNL/2018-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/ORNL/2019-05 ## 29 https://data.neonscience.org/api/v0/data/DP1.10003.001/OSBS/2016-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/OSBS/2017-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/OSBS/2018-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/OSBS/2019-05 ## 30 https://data.neonscience.org/api/v0/data/DP1.10003.001/PUUM/2018-04 ## 31 https://data.neonscience.org/api/v0/data/DP1.10003.001/RMNP/2017-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/RMNP/2017-07, https://data.neonscience.org/api/v0/data/DP1.10003.001/RMNP/2018-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/RMNP/2018-07, https://data.neonscience.org/api/v0/data/DP1.10003.001/RMNP/2019-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/RMNP/2019-07 ## 32 https://data.neonscience.org/api/v0/data/DP1.10003.001/SCBI/2015-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/SCBI/2016-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/SCBI/2016-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/SCBI/2017-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/SCBI/2017-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/SCBI/2018-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/SCBI/2018-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/SCBI/2019-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/SCBI/2019-06 ## 33 https://data.neonscience.org/api/v0/data/DP1.10003.001/SERC/2017-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/SERC/2017-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/SERC/2018-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/SERC/2019-05 ## 34 https://data.neonscience.org/api/v0/data/DP1.10003.001/SJER/2017-04, https://data.neonscience.org/api/v0/data/DP1.10003.001/SJER/2018-04, https://data.neonscience.org/api/v0/data/DP1.10003.001/SJER/2019-04 ## 35 https://data.neonscience.org/api/v0/data/DP1.10003.001/SOAP/2017-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/SOAP/2018-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/SOAP/2019-05 ## 36 https://data.neonscience.org/api/v0/data/DP1.10003.001/SRER/2017-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/SRER/2018-04, https://data.neonscience.org/api/v0/data/DP1.10003.001/SRER/2018-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/SRER/2019-04 ## 37 https://data.neonscience.org/api/v0/data/DP1.10003.001/STEI/2016-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/STEI/2016-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/STEI/2017-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/STEI/2018-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/STEI/2018-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/STEI/2019-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/STEI/2019-06 ## 38 https://data.neonscience.org/api/v0/data/DP1.10003.001/STER/2013-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/STER/2015-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/STER/2016-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/STER/2017-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/STER/2018-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/STER/2019-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/STER/2019-06 ## 39 https://data.neonscience.org/api/v0/data/DP1.10003.001/TALL/2015-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/TALL/2016-07, https://data.neonscience.org/api/v0/data/DP1.10003.001/TALL/2017-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/TALL/2018-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/TALL/2019-05 ## 40 https://data.neonscience.org/api/v0/data/DP1.10003.001/TEAK/2017-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/TEAK/2018-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/TEAK/2019-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/TEAK/2019-07 ## 41 https://data.neonscience.org/api/v0/data/DP1.10003.001/TOOL/2017-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/TOOL/2018-07, https://data.neonscience.org/api/v0/data/DP1.10003.001/TOOL/2019-06 ## 42 https://data.neonscience.org/api/v0/data/DP1.10003.001/TREE/2016-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/TREE/2017-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/TREE/2018-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/TREE/2019-06 ## 43 https://data.neonscience.org/api/v0/data/DP1.10003.001/UKFS/2017-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/UKFS/2018-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/UKFS/2019-06 ## 44 https://data.neonscience.org/api/v0/data/DP1.10003.001/UNDE/2016-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/UNDE/2016-07, https://data.neonscience.org/api/v0/data/DP1.10003.001/UNDE/2017-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/UNDE/2018-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/UNDE/2019-06 ## 45 https://data.neonscience.org/api/v0/data/DP1.10003.001/WOOD/2015-07, https://data.neonscience.org/api/v0/data/DP1.10003.001/WOOD/2017-07, https://data.neonscience.org/api/v0/data/DP1.10003.001/WOOD/2018-07, https://data.neonscience.org/api/v0/data/DP1.10003.001/WOOD/2019-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/WOOD/2019-07 ## 46 https://data.neonscience.org/api/v0/data/DP1.10003.001/WREF/2018-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/WREF/2019-05, https://data.neonscience.org/api/v0/data/DP1.10003.001/WREF/2019-06 ## 47 https://data.neonscience.org/api/v0/data/DP1.10003.001/YELL/2018-06, https://data.neonscience.org/api/v0/data/DP1.10003.001/YELL/2019-06 The object contains a lot of information about the data product, including: keywords under $data$keywords, references for documentation under $data$specs, data availability by site and month under $data$siteCodes, and specific URLs for the API calls for each site and month under $data$siteCodes$availableDataUrls. We need $data$siteCodes to tell us what we can download. $data$siteCodes$availableDataUrls allows us to avoid writing the API calls ourselves in the next steps. # get data availability list for the product bird.urls &lt;- unlist(avail$data$siteCodes$availableDataUrls) length(bird.urls) #total number of URLs ## [1] 204 bird.urls[1:10] #show first 10 URLs available ## [1] &quot;https://data.neonscience.org/api/v0/data/DP1.10003.001/ABBY/2017-05&quot; ## [2] &quot;https://data.neonscience.org/api/v0/data/DP1.10003.001/ABBY/2017-06&quot; ## [3] &quot;https://data.neonscience.org/api/v0/data/DP1.10003.001/ABBY/2018-06&quot; ## [4] &quot;https://data.neonscience.org/api/v0/data/DP1.10003.001/ABBY/2018-07&quot; ## [5] &quot;https://data.neonscience.org/api/v0/data/DP1.10003.001/ABBY/2019-05&quot; ## [6] &quot;https://data.neonscience.org/api/v0/data/DP1.10003.001/BARR/2017-07&quot; ## [7] &quot;https://data.neonscience.org/api/v0/data/DP1.10003.001/BARR/2018-07&quot; ## [8] &quot;https://data.neonscience.org/api/v0/data/DP1.10003.001/BARR/2019-06&quot; ## [9] &quot;https://data.neonscience.org/api/v0/data/DP1.10003.001/BART/2015-06&quot; ## [10] &quot;https://data.neonscience.org/api/v0/data/DP1.10003.001/BART/2016-06&quot; These are the URLs showing us what files are available for each month where there are data. Let’s look at the bird data from Woodworth (WOOD) site from July 2015. We can do this by using the above code but now specifying which site/date we want using the grep() function. Note that if there were only one month of data from a site, you could leave off the date in the function. If you want data from more than one site/month you need to iterate this code, GET fails if you give it more than one URL. # get data availability for WOOD July 2015 brd &lt;- GET(bird.urls[grep(&quot;WOOD/2015-07&quot;, bird.urls)]) brd.files &lt;- jsonlite::fromJSON(content(brd, as=&quot;text&quot;)) # view just the available data files brd.files$data$files ## crc32 ## 1 d84b496cf950b5b96e762473beda563a ## 2 6d15da01c03793da8fc6d871e6659ea8 ## 3 e0adb3146b5cce59eea09864145efcb1 ## 4 f37931d46213246dccf2a161211c9afe ## 5 df102cb4cfdce092cda3c0942c9d9b67 ## 6 4438e5e050fc7be5949457f42089a397 ## 7 e67f1ae72760a63c616ec18108453aaa ## 8 6d15da01c03793da8fc6d871e6659ea8 ## 9 e67f1ae72760a63c616ec18108453aaa ## 10 d76cfc5443ac27a058fab1d319d31d34 ## 11 22e3353dabb8b154768dc2eee9873718 ## 12 6ba91b6e109ff14d1911dcaad9febeb9 ## 13 a2c47410a6a0f49d0b1cf95be6238604 ## 14 680a2f53c0a9d1b0ab4f8814bda5b399 ## 15 f37931d46213246dccf2a161211c9afe ## 16 2ad379ae44f4e87996bdc3dee70a0794 ## name ## 1 NEON.D09.WOOD.DP1.10003.001.readme.20191107T152331Z.txt ## 2 NEON.D09.WOOD.DP0.10003.001.validation.20191107T152331Z.csv ## 3 NEON.D09.WOOD.DP1.10003.001.brd_countdata.2015-07.basic.20191107T152331Z.csv ## 4 NEON.D09.WOOD.DP1.10003.001.brd_perpoint.2015-07.basic.20191107T152331Z.csv ## 5 NEON.D09.WOOD.DP1.10003.001.EML.20150701-20150705.20191107T152331Z.xml ## 6 NEON.D09.WOOD.DP1.10003.001.2015-07.basic.20191107T152331Z.zip ## 7 NEON.D09.WOOD.DP1.10003.001.variables.20191107T152331Z.csv ## 8 NEON.D09.WOOD.DP0.10003.001.validation.20191107T152331Z.csv ## 9 NEON.D09.WOOD.DP1.10003.001.variables.20191107T152331Z.csv ## 10 NEON.D09.WOOD.DP1.10003.001.brd_references.expanded.20191107T152331Z.csv ## 11 NEON.D09.WOOD.DP1.10003.001.2015-07.expanded.20191107T152331Z.zip ## 12 NEON.D09.WOOD.DP1.10003.001.EML.20150701-20150705.20191107T152331Z.xml ## 13 NEON.Bird_Conservancy_of_the_Rockies.brd_personnel.csv ## 14 NEON.D09.WOOD.DP1.10003.001.readme.20191107T152331Z.txt ## 15 NEON.D09.WOOD.DP1.10003.001.brd_perpoint.2015-07.expanded.20191107T152331Z.csv ## 16 NEON.D09.WOOD.DP1.10003.001.brd_countdata.2015-07.expanded.20191107T152331Z.csv ## size ## 1 12784 ## 2 10084 ## 3 346679 ## 4 23521 ## 5 70539 ## 6 67816 ## 7 7337 ## 8 10084 ## 9 7337 ## 10 1012 ## 11 79998 ## 12 78750 ## 13 46349 ## 14 13063 ## 15 23521 ## 16 367402 ## url ## 1 https://neon-prod-pub-1.s3.data.neonscience.org/NEON.DOM.SITE.DP1.10003.001/PROV/WOOD/20150701T000000--20150801T000000/basic/NEON.D09.WOOD.DP1.10003.001.readme.20191107T152331Z.txt?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Date=20200805T210645Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Expires=3600&amp;X-Amz-Credential=pub-internal-read%2F20200805%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Signature=c797e0c7cd77e94a4f36cc879ce15cc01d473f6d4dad2aed1ef953a9eccf2f37 ## 2 https://neon-prod-pub-1.s3.data.neonscience.org/NEON.DOM.SITE.DP1.10003.001/PROV/WOOD/20150701T000000--20150801T000000/basic/NEON.D09.WOOD.DP0.10003.001.validation.20191107T152331Z.csv?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Date=20200805T210645Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Expires=3600&amp;X-Amz-Credential=pub-internal-read%2F20200805%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Signature=43380a9a2e42ec0390c8cabdf94768e8edb39c3eb375f62eb21ec66dec5c2df0 ## 3 https://neon-prod-pub-1.s3.data.neonscience.org/NEON.DOM.SITE.DP1.10003.001/PROV/WOOD/20150701T000000--20150801T000000/basic/NEON.D09.WOOD.DP1.10003.001.brd_countdata.2015-07.basic.20191107T152331Z.csv?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Date=20200805T210645Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Expires=3599&amp;X-Amz-Credential=pub-internal-read%2F20200805%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Signature=623ddd9e93b8847c6320103470c21b4b29b246181e56a14a724e1b23c4f45fb1 ## 4 https://neon-prod-pub-1.s3.data.neonscience.org/NEON.DOM.SITE.DP1.10003.001/PROV/WOOD/20150701T000000--20150801T000000/basic/NEON.D09.WOOD.DP1.10003.001.brd_perpoint.2015-07.basic.20191107T152331Z.csv?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Date=20200805T210645Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Expires=3600&amp;X-Amz-Credential=pub-internal-read%2F20200805%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Signature=88a8d1bdddf5cc06838efe01ffbbf766bde436af1bd9dc1263122c23426c5ecf ## 5 https://neon-prod-pub-1.s3.data.neonscience.org/NEON.DOM.SITE.DP1.10003.001/PROV/WOOD/20150701T000000--20150801T000000/basic/NEON.D09.WOOD.DP1.10003.001.EML.20150701-20150705.20191107T152331Z.xml?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Date=20200805T210645Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Expires=3600&amp;X-Amz-Credential=pub-internal-read%2F20200805%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Signature=a437bb85e8b4cdde8d6ff02b253c00d1e0ed60191837a316d5363c783cf444d8 ## 6 https://neon-prod-pub-1.s3.data.neonscience.org/NEON.DOM.SITE.DP1.10003.001/PROV/WOOD/20150701T000000--20150801T000000/basic/NEON.D09.WOOD.DP1.10003.001.2015-07.basic.20191107T152331Z.zip?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Date=20200805T210645Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Expires=3599&amp;X-Amz-Credential=pub-internal-read%2F20200805%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Signature=8591865423b3efdaa0e6db50fd552e73d0355082719e3081a236183e85a8da6b ## 7 https://neon-prod-pub-1.s3.data.neonscience.org/NEON.DOM.SITE.DP1.10003.001/PROV/WOOD/20150701T000000--20150801T000000/basic/NEON.D09.WOOD.DP1.10003.001.variables.20191107T152331Z.csv?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Date=20200805T210645Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Expires=3600&amp;X-Amz-Credential=pub-internal-read%2F20200805%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Signature=8758852f9a0c90876737695cb08c337c1cfc1d026062ed6cfbd1f382d6431e24 ## 8 https://neon-prod-pub-1.s3.data.neonscience.org/NEON.DOM.SITE.DP1.10003.001/PROV/WOOD/20150701T000000--20150801T000000/expanded/NEON.D09.WOOD.DP0.10003.001.validation.20191107T152331Z.csv?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Date=20200805T210645Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Expires=3600&amp;X-Amz-Credential=pub-internal-read%2F20200805%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Signature=e51ac843508fb96a154c8a6320922d171bc763fbe0c6850dace248902b0d104e ## 9 https://neon-prod-pub-1.s3.data.neonscience.org/NEON.DOM.SITE.DP1.10003.001/PROV/WOOD/20150701T000000--20150801T000000/expanded/NEON.D09.WOOD.DP1.10003.001.variables.20191107T152331Z.csv?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Date=20200805T210645Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Expires=3600&amp;X-Amz-Credential=pub-internal-read%2F20200805%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Signature=9c83edf761bb6a7ac59c7fe5f256c6dfe4f72c1719d5271db322b6c83bbdf408 ## 10 https://neon-prod-pub-1.s3.data.neonscience.org/NEON.DOM.SITE.DP1.10003.001/PROV/WOOD/20150701T000000--20150801T000000/expanded/NEON.D09.WOOD.DP1.10003.001.brd_references.expanded.20191107T152331Z.csv?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Date=20200805T210645Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Expires=3600&amp;X-Amz-Credential=pub-internal-read%2F20200805%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Signature=0c8c587663365124f0fc130ec68a0e974eaddd0b8923a788b55fb99c8f971d0b ## 11 https://neon-prod-pub-1.s3.data.neonscience.org/NEON.DOM.SITE.DP1.10003.001/PROV/WOOD/20150701T000000--20150801T000000/expanded/NEON.D09.WOOD.DP1.10003.001.2015-07.expanded.20191107T152331Z.zip?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Date=20200805T210645Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Expires=3599&amp;X-Amz-Credential=pub-internal-read%2F20200805%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Signature=7f64bf7167ee46506e7f12799f762dc14073c88b0f205fa3206c866bef473352 ## 12 https://neon-prod-pub-1.s3.data.neonscience.org/NEON.DOM.SITE.DP1.10003.001/PROV/WOOD/20150701T000000--20150801T000000/expanded/NEON.D09.WOOD.DP1.10003.001.EML.20150701-20150705.20191107T152331Z.xml?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Date=20200805T210645Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Expires=3600&amp;X-Amz-Credential=pub-internal-read%2F20200805%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Signature=298654d92dcd8d8ad6cbcb5df6e289149e0508c3333d6c8ee8d46c7bf023eff1 ## 13 https://neon-prod-pub-1.s3.data.neonscience.org/NEON.DOM.SITE.DP1.10003.001/PROV/WOOD/20150701T000000--20150801T000000/expanded/NEON.Bird_Conservancy_of_the_Rockies.brd_personnel.csv?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Date=20200805T210645Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Expires=3600&amp;X-Amz-Credential=pub-internal-read%2F20200805%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Signature=c1575b843fab66917494b5681d634c31f10f0b2bb2d033ac4a206013d95e2b22 ## 14 https://neon-prod-pub-1.s3.data.neonscience.org/NEON.DOM.SITE.DP1.10003.001/PROV/WOOD/20150701T000000--20150801T000000/expanded/NEON.D09.WOOD.DP1.10003.001.readme.20191107T152331Z.txt?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Date=20200805T210645Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Expires=3600&amp;X-Amz-Credential=pub-internal-read%2F20200805%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Signature=700eab3d0bdc9e9eb99fc477b47a9b8ac995d3068f7bd57f99025dbd93bb9c4a ## 15 https://neon-prod-pub-1.s3.data.neonscience.org/NEON.DOM.SITE.DP1.10003.001/PROV/WOOD/20150701T000000--20150801T000000/expanded/NEON.D09.WOOD.DP1.10003.001.brd_perpoint.2015-07.expanded.20191107T152331Z.csv?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Date=20200805T210645Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Expires=3600&amp;X-Amz-Credential=pub-internal-read%2F20200805%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Signature=df6003923ceda1fb612c55362e222929bdf4842da720f5a31ff75a4a8e4dab6b ## 16 https://neon-prod-pub-1.s3.data.neonscience.org/NEON.DOM.SITE.DP1.10003.001/PROV/WOOD/20150701T000000--20150801T000000/expanded/NEON.D09.WOOD.DP1.10003.001.brd_countdata.2015-07.expanded.20191107T152331Z.csv?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Date=20200805T210645Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Expires=3600&amp;X-Amz-Credential=pub-internal-read%2F20200805%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Signature=4c4bf1dc082672472635f17ceade9d3a01a5c44dadf9640edfbaa3d23aac5e8e In this output, name and url are key fields. It provides us with the names of the files available for this site and month, and URLs where we can get the files. We’ll use the file names to pick which ones we want. The available files include both data and metadata, and both the basic and expanded data packages. Typically the expanded package includes additional quality or uncertainty data, either in additional files or additional fields than in the basic files. Basic and expanded data packages are available for most NEON data products (some only have basic). Metadata are described by file name below. The format for most of the file names is: NEON.[domain number].[site code].[data product ID].[file-specific name]. [date of file creation] Some files omit the domain and site, since they’re not specific to a location, like the data product readme. The date of file creation uses the ISO6801 format, in this case 20170720T182547Z, and can be used to determine whether data have been updated since the last time you downloaded. Available files in our query for July 2015 at Woodworth are all of the following (leaving off the initial NEON.D09.WOOD.10003.001): ~.2015-07.expanded.20170720T182547Z.zip: zip of all files in the expanded package ~.brd_countdata.2015-07.expanded.20170720T182547Z.csv: count data table, expanded package version: counts of birds at each point ~.brd_perpoint.2015-07.expanded.20170720T182547Z.csv: point data table, expanded package version: metadata at each observation point NEON.Bird Conservancy of the Rockies.brd_personnel.csv: personnel data table, accuracy scores for bird observers ~.2015-07.basic.20170720T182547Z.zip: zip of all files in the basic package ~.brd_countdata.2015-07.basic.20170720T182547Z.csv: count data table, basic package version: counts of birds at each point ~.brd_perpoint.2015-07.basic.20170720T182547Z.csv: point data table, basic package version: metadata at each observation point NEON.DP1.10003.001_readme.txt: readme for the data product (not specific to dates or location). Appears twice in the list, since it’s in both the basic and expanded package ~.20150101-20160613.xml: Ecological Metadata Language (EML) file. Appears twice in the list, since it’s in both the basic and expanded package ~.validation.20170720T182547Z.csv: validation file for the data product, lists input data and data entry rules. Appears twice in the list, since it’s in both the basic and expanded package ~.variables.20170720T182547Z.csv: variables file for the data product, lists data fields in downloaded tables. Appears twice in the list, since it’s in both the basic and expanded package We’ll get the data tables for the point data and count data in the basic package. The list of files doesn’t return in the same order every time, so we won’t use position in the list to select. Plus, we want code we can re-use when getting data from other sites and other months. So we select files based on the data table name and the package name. # Get both files brd.count &lt;- read.delim(brd.files$data$files$url [intersect(grep(&quot;countdata&quot;, brd.files$data$files$name), grep(&quot;basic&quot;, brd.files$data$files$name))], sep=&quot;,&quot;) brd.point &lt;- read.delim(brd.files$data$files$url [intersect(grep(&quot;perpoint&quot;, brd.files$data$files$name), grep(&quot;basic&quot;, brd.files$data$files$name))], sep=&quot;,&quot;) Now we have the data and can access it in R. Just to show that the files we pulled have actual data in them, let’s make a quick graphic: # Cluster by species clusterBySp &lt;- brd.count %&gt;% dplyr::group_by(scientificName) %&gt;% dplyr::summarise(total=sum(clusterSize, na.rm=T)) ## `summarise()` ungrouping output (override with `.groups` argument) # Reorder so list is ordered most to least abundance clusterBySp &lt;- clusterBySp[order(clusterBySp$total, decreasing=T),] # Plot barplot(clusterBySp$total, names.arg=clusterBySp$scientificName, ylab=&quot;Total&quot;, cex.names=0.5, las=2) Wow! There are lots of Agelaius phoeniceus (Red-winged Blackbirds) at WOOD in July. 2.13.4 Instrumentation data (IS) The process is essentially the same for sensor data. We’ll do the same series of queries for Soil Temperature, DP1.00041.001. Let’s use data from Moab in March 2017 this time. # Request soil temperature data availability info req.soil &lt;- GET(&quot;http://data.neonscience.org/api/v0/products/DP1.00041.001&quot;) # make this JSON readable # Note how we&#39;ve change this from two commands into one here avail.soil &lt;- jsonlite::fromJSON(content(req.soil, as=&quot;text&quot;), simplifyDataFrame=T, flatten=T) # get data availability list for the product temp.urls &lt;- unlist(avail.soil$data$siteCodes$availableDataUrls) # get data availability from location/date of interest tmp &lt;- GET(temp.urls[grep(&quot;MOAB/2017-06&quot;, temp.urls)]) tmp.files &lt;- jsonlite::fromJSON(content(tmp, as=&quot;text&quot;)) length(tmp.files$data$files$name) # There are a lot of available files ## [1] 190 tmp.files$data$files$name[1:10] # Let&#39;s print the first 10 ## [1] &quot;NEON.D13.MOAB.DP1.00041.001.readme.20200620T070859Z.txt&quot; ## [2] &quot;NEON.D13.MOAB.DP1.00041.001.003.509.001.ST_1_minute.2017-06.expanded.20200620T070859Z.csv&quot; ## [3] &quot;NEON.D13.MOAB.DP1.00041.001.002.504.001.ST_1_minute.2017-06.expanded.20200620T070859Z.csv&quot; ## [4] &quot;NEON.D13.MOAB.DP1.00041.001.003.509.030.ST_30_minute.2017-06.expanded.20200620T070859Z.csv&quot; ## [5] &quot;NEON.D13.MOAB.DP1.00041.001.002.502.030.ST_30_minute.2017-06.expanded.20200620T070859Z.csv&quot; ## [6] &quot;NEON.D13.MOAB.DP1.00041.001.001.504.001.ST_1_minute.2017-06.expanded.20200620T070859Z.csv&quot; ## [7] &quot;NEON.D13.MOAB.DP1.00041.001.005.506.001.ST_1_minute.2017-06.expanded.20200620T070859Z.csv&quot; ## [8] &quot;NEON.D13.MOAB.DP1.00041.001.002.507.030.ST_30_minute.2017-06.expanded.20200620T070859Z.csv&quot; ## [9] &quot;NEON.D13.MOAB.DP1.00041.001.002.506.001.ST_1_minute.2017-06.expanded.20200620T070859Z.csv&quot; ## [10] &quot;NEON.D13.MOAB.DP1.00041.001.003.503.001.ST_1_minute.2017-06.expanded.20200620T070859Z.csv&quot; These file names start and end the same way as the observational files, but the middle is a little more cryptic. The structure from beginning to end is: NEON.[domain number].[site code].[data product ID].00000. [soil plot number].[depth].[averaging interval].[data table name]. [year]-[month].[data package].[date of file creation] So “NEON.D13.MOAB.DP1.00041.001.003.507.030.ST_30_minute.2017-06.expanded.20200620T070859Z.csv” is the: NEON (NEON.) Domain 13 (.D13.) Moab field site (.MOAB.) soil temperature data (.DP1.00041.001.) collected in Soil Plot 2, (.002.) at the 7th depth below the surface (.507.) and reported as a 30-minute mean of (.030. and .ST_30_minute.) only for the period of June 2017 (.2017-06.) and provided in a expanded data package (.basic.) published on June 20th, 2020 (.0200620T070859Z.). More information about interpreting file names can be found in the readme that accompanies each download. Let’s get data (and the URL) for only the 2nd depth described above by selecting 002.502.030 and the word basic in the file name. Go get it: soil.temp &lt;- read.delim(tmp.files$data$files$url [intersect(grep(&quot;002.502.030&quot;, tmp.files$data$files$name), grep(&quot;basic&quot;, tmp.files$data$files$name))], sep=&quot;,&quot;) Now we have the data and can use it to conduct our analyses. To take a quick look at it, let’s plot the mean soil temperature by date. # plot temp ~ date plot(soil.temp$soilTempMean~as.POSIXct(soil.temp$startDateTime, format=&quot;%Y-%m-%d T %H:%M:%S Z&quot;), pch=&quot;.&quot;, xlab=&quot;Date&quot;, ylab=&quot;T&quot;) As we’d expect we see daily fluctuation in soil temperature. 2.13.5 Remote sensing data (AOP) Again, the process of determining which sites and time periods have data, and finding the URLs for those data, is the same as for the other data types. We’ll go looking for High resolution orthorectified camera imagery, DP1.30010, and we’ll look at the flight over San Joaquin Experimental Range (SJER) in March 2017. # Request camera data availability info req.aop &lt;- GET(&quot;http://data.neonscience.org/api/v0/products/DP1.30010.001&quot;) # make this JSON readable # Note how we&#39;ve changed this from two commands into one here avail.aop &lt;- jsonlite::fromJSON(content(req.aop, as=&quot;text&quot;), simplifyDataFrame=T, flatten=T) # get data availability list for the product cam.urls &lt;- unlist(avail.aop$data$siteCodes$availableDataUrls) # get data availability from location/date of interest cam &lt;- GET(cam.urls[intersect(grep(&quot;SJER&quot;, cam.urls), grep(&quot;2017&quot;, cam.urls))]) cam.files &lt;- jsonlite::fromJSON(content(cam, as=&quot;text&quot;)) # this list of files is very long, so we&#39;ll just look at the first ten head(cam.files$data$files$name, 10) ## [1] &quot;17032816_EH021656(20170328182329)-0342_ort.tif&quot; ## [2] &quot;17032816_EH021656(20170328181633)-0279_ort.tif&quot; ## [3] &quot;17032816_EH021656(20170328193818)-0957_ort.tif&quot; ## [4] &quot;17032816_EH021656(20170328183021)-0403_ort.tif&quot; ## [5] &quot;17032816_EH021656(20170328182349)-0346_ort.tif&quot; ## [6] &quot;17032816_EH021656(20170328180609)-0203_ort.tif&quot; ## [7] &quot;17032816_EH021656(20170328182114)-0314_ort.tif&quot; ## [8] &quot;17032816_EH021656(20170328201525)-1253_ort.tif&quot; ## [9] &quot;17032816_EH021656(20170328174855)-0051_ort.tif&quot; ## [10] &quot;17032816_EH021656(20170328191130)-0717_ort.tif&quot; File names for AOP data are more variable than for IS or OS data; different AOP data products use different naming conventions. File formats differ by product as well. This particular product, camera imagery, is stored in TIFF files. For a full list of AOP data products, their naming conventions, and their file formats, see update from NEON?. Instead of reading a TIFF into R, we’ll download it to the working directory. This is one option for getting AOP files from the API; if you plan to work with the files in R, you’ll need to know how to read the relevant file types into R. We hope to add tutorials for this in the near future. To download the TIFF file, we use the downloader package, and we’ll select a file based on the time stamp in the file name: 20170328192931 download(cam.files$data$files$url[grep(&quot;20170328192931&quot;, cam.files$data$files$name)], paste(getwd(), &quot;/SJER_image.tif&quot;, sep=&quot;&quot;), mode=&quot;wb&quot;) The image, below, of the San Joaquin Experimental Range should now be in your working directory. &lt;a href=&quot;https://raw.githubusercontent.com/NEONScience/NEON-Data-Skills/dev-aten/graphics/neon-aop/SJER_tile_20170328192931.png&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/NEONScience/NEON-Data-Skills/dev-aten/graphics/neon-aop/SJER_tile_20170328192931.png&quot;&gt;&lt;/a&gt; &lt;figcaption&gt; An example of camera data (DP1.30010.001) from the San Joaquin Experimental Range. Source: National Ecological Observatory Network (NEON) &lt;/figcaption&gt; 2.13.6 Geolocation data You may have noticed some of the spatial data referenced above are a bit vague, e.g. “soil plot 2, 4th depth below the surface.” How to get spatial data and what to do with it depends on which type of data you’re working with. 2.13.6.1 Instrumentation data (both aquatic and terrestrial) Stay tuned - spatial data for instruments are in the process of entry into the NEON database. 2.13.6.2 Observational data - Aquatic Latitude, longitude, elevation, and associated uncertainties are included in data downloads. Most products also include an “additional coordinate uncertainty” that should be added to the provided uncertainty. Additional spatial data, such as northing and easting, can be downloaded from the API. 2.13.6.3 Observational data - Terrestrial Latitude, longitude, elevation, and associated uncertainties are included in data downloads. These are the coordinates and uncertainty of the sampling plot; for many protocols it is possible to calculate a more precise location. Instructions for doing this are in the respective data product user guides, and code is in the geoNEON package on GitHub. 2.13.7 Querying a single named location Let’s look at the named locations in the bird data we downloaded above. To do this, look for the field called namedLocation, which is present in all observational data products, both aquatic and terrestrial. # view named location head(brd.point$namedLocation) ## [1] WOOD_013.birdGrid.brd WOOD_013.birdGrid.brd WOOD_013.birdGrid.brd ## [4] WOOD_013.birdGrid.brd WOOD_013.birdGrid.brd WOOD_013.birdGrid.brd ## 7 Levels: WOOD_006.birdGrid.brd ... WOOD_020.birdGrid.brd Here we see the first six entries in the namedLocation column which tells us the names of the Terrestrial Observation plots where the bird surveys were conducted. We can query the locations endpoint of the API for the first named location, WOOD_013.birdGrid.brd. # location data req.loc &lt;- GET(&quot;http://data.neonscience.org/api/v0/locations/WOOD_013.birdGrid.brd&quot;) # make this JSON readable brd.WOOD_013 &lt;- jsonlite::fromJSON(content(req.loc, as=&quot;text&quot;)) brd.WOOD_013 ## $data ## $data$locationName ## [1] &quot;WOOD_013.birdGrid.brd&quot; ## ## $data$locationDescription ## [1] &quot;Plot \\&quot;WOOD_013\\&quot; at site \\&quot;WOOD\\&quot;&quot; ## ## $data$locationType ## [1] &quot;OS Plot - brd&quot; ## ## $data$domainCode ## [1] &quot;D09&quot; ## ## $data$siteCode ## [1] &quot;WOOD&quot; ## ## $data$locationDecimalLatitude ## [1] 47.13912 ## ## $data$locationDecimalLongitude ## [1] -99.23243 ## ## $data$locationElevation ## [1] 579.31 ## ## $data$locationUtmEasting ## [1] 482375.7 ## ## $data$locationUtmNorthing ## [1] 5220650 ## ## $data$locationUtmHemisphere ## [1] &quot;N&quot; ## ## $data$locationUtmZone ## [1] 14 ## ## $data$alphaOrientation ## [1] 0 ## ## $data$betaOrientation ## [1] 0 ## ## $data$gammaOrientation ## [1] 0 ## ## $data$xOffset ## [1] 0 ## ## $data$yOffset ## [1] 0 ## ## $data$zOffset ## [1] 0 ## ## $data$offsetLocation ## NULL ## ## $data$locationProperties ## locationPropertyName locationPropertyValue ## 1 Value for Coordinate source GeoXH 6000 ## 2 Value for Coordinate uncertainty 0.28 ## 3 Value for Country unitedStates ## 4 Value for County Stutsman ## 5 Value for Elevation uncertainty 0.48 ## 6 Value for Filtered positions 121 ## 7 Value for Geodetic datum WGS84 ## 8 Value for Horizontal dilution of precision 1 ## 9 Value for Maximum elevation 579.31 ## 10 Value for Minimum elevation 569.79 ## 11 Value for National Land Cover Database (2001) grasslandHerbaceous ## 12 Value for Plot dimensions 500m x 500m ## 13 Value for Plot ID WOOD_013 ## 14 Value for Plot size 250000 ## 15 Value for Plot subtype birdGrid ## 16 Value for Plot type distributed ## 17 Value for Positional dilution of precision 2.4 ## 18 Value for Reference Point Position B2 ## 19 Value for Slope aspect 238.91 ## 20 Value for Slope gradient 2.83 ## 21 Value for Soil type order Mollisols ## 22 Value for State province ND ## 23 Value for Subtype Specification ninePoints ## 24 Value for UTM Zone 14N ## ## $data$locationParent ## [1] &quot;WOOD&quot; ## ## $data$locationParentUrl ## [1] &quot;https://data.neonscience.org/api/v0/locations/WOOD&quot; ## ## $data$locationChildren ## [1] &quot;WOOD_013.birdGrid.brd.B2&quot; &quot;WOOD_013.birdGrid.brd.A2&quot; ## [3] &quot;WOOD_013.birdGrid.brd.C3&quot; &quot;WOOD_013.birdGrid.brd.A3&quot; ## [5] &quot;WOOD_013.birdGrid.brd.B3&quot; &quot;WOOD_013.birdGrid.brd.C1&quot; ## [7] &quot;WOOD_013.birdGrid.brd.A1&quot; &quot;WOOD_013.birdGrid.brd.B1&quot; ## [9] &quot;WOOD_013.birdGrid.brd.C2&quot; ## ## $data$locationChildrenUrls ## [1] &quot;https://data.neonscience.org/api/v0/locations/WOOD_013.birdGrid.brd.B2&quot; ## [2] &quot;https://data.neonscience.org/api/v0/locations/WOOD_013.birdGrid.brd.A2&quot; ## [3] &quot;https://data.neonscience.org/api/v0/locations/WOOD_013.birdGrid.brd.C3&quot; ## [4] &quot;https://data.neonscience.org/api/v0/locations/WOOD_013.birdGrid.brd.A3&quot; ## [5] &quot;https://data.neonscience.org/api/v0/locations/WOOD_013.birdGrid.brd.B3&quot; ## [6] &quot;https://data.neonscience.org/api/v0/locations/WOOD_013.birdGrid.brd.C1&quot; ## [7] &quot;https://data.neonscience.org/api/v0/locations/WOOD_013.birdGrid.brd.A1&quot; ## [8] &quot;https://data.neonscience.org/api/v0/locations/WOOD_013.birdGrid.brd.B1&quot; ## [9] &quot;https://data.neonscience.org/api/v0/locations/WOOD_013.birdGrid.brd.C2&quot; Note spatial information under $data$[nameOfCoordinate] and under $data$locationProperties. Also note $data$locationChildren: these are the finer scale locations that can be used to calculate precise spatial data for bird observations. For convenience, we’ll use the geoNEON package to make the calculations. First we’ll use getLocByName() to get the additional spatial information available through the API, and look at the spatial resolution available in the initial download: # load the geoNEON package library(geoNEON) # extract the spatial data brd.point.loc &lt;- getLocByName(brd.point) ## | | | 0% | |========= | 14% | |=================== | 29% | |============================ | 43% | |===================================== | 57% | |============================================== | 71% | |======================================================== | 86% | |=================================================================| 100% # plot bird point locations # note that decimal degrees is also an option in the data symbols(brd.point.loc$easting, brd.point.loc$northing, circles=brd.point.loc$coordinateUncertainty, xlab=&quot;Easting&quot;, ylab=&quot;Northing&quot;, tck=0.01, inches=F) And use getLocTOS() to calculate the point locations of observations. brd.point.pt &lt;- getLocTOS(brd.point, &quot;brd_perpoint&quot;) ## | | | 0% | |= | 2% | |== | 3% | |=== | 5% | |==== | 6% | |===== | 8% | |====== | 10% | |======= | 11% | |======== | 13% | |========= | 14% | |========== | 16% | |=========== | 17% | |============ | 19% | |============= | 21% | |============== | 22% | |=============== | 24% | |================= | 25% | |================== | 27% | |=================== | 29% | |==================== | 30% | |===================== | 32% | |====================== | 33% | |======================= | 35% | |======================== | 37% | |========================= | 38% | |========================== | 40% | |=========================== | 41% | |============================ | 43% | |============================= | 44% | |============================== | 46% | |=============================== | 48% | |================================ | 49% | |================================= | 51% | |================================== | 52% | |=================================== | 54% | |==================================== | 56% | |===================================== | 57% | |====================================== | 59% | |======================================= | 60% | |======================================== | 62% | |========================================= | 63% | |========================================== | 65% | |=========================================== | 67% | |============================================ | 68% | |============================================= | 70% | |============================================== | 71% | |=============================================== | 73% | |================================================ | 75% | |================================================== | 76% | |=================================================== | 78% | |==================================================== | 79% | |===================================================== | 81% | |====================================================== | 83% | |======================================================= | 84% | |======================================================== | 86% | |========================================================= | 87% | |========================================================== | 89% | |=========================================================== | 90% | |============================================================ | 92% | |============================================================= | 94% | |============================================================== | 95% | |=============================================================== | 97% | |================================================================ | 98% | |=================================================================| 100% # plot bird point locations # note that decimal degrees is also an option in the data # symbols(brd.point.pt$easting, brd.point.pt$northing, # circles=brd.point.pt$adjCoordinateUncertainty, # xlab=&quot;Easting&quot;, ylab=&quot;Northing&quot;, tck=0.01, inches=F) Now you can see the individual points where the respective point counts were located. 2.13.8 Taxonomy NEON maintains accepted taxonomies for many of the taxonomic identification data we collect. NEON taxonomies are available for query via the API; they are also provided via an interactive user interface, the Taxon Viewer. NEON taxonomy data provides the reference information for how NEON validates taxa; an identification must appear in the taxonomy lists in order to be accepted into the NEON database. Additions to the lists are reviewed regularly. The taxonomy lists also provide the author of the scientific name, and the reference text used. The taxonomy endpoint of the API works a little bit differently from the other endpoints. In the “Anatomy of an API Call” section above, each endpoint has a single type of target - a data product number, a named location name, etc. For taxonomic data, there are multiple query options, and some of them can be used in combination. For example, a query for taxa in the Pinaceae family: http://data.neonscience.org/api/v0/taxonomy/?family=Pinaceae The available types of queries are listed in the taxonomy section of the API web page. Briefly, they are: taxonTypeCode: Which of the taxonomies maintained by NEON are you looking for? BIRD, FISH, PLANT, etc. Cannot be used in combination with the taxonomic rank queries. each of the major taxonomic ranks from genus through kingdom scientificname: Genus + specific epithet (+ authority). Search is by exact match only, see final example below. verbose: Do you want the short (false) or long (true) response offset: Skip this number of items in the list. Defaults to 50. limit: Result set will be truncated at this length. Defaults to 50. Staff on the NEON project have plans to modify the settings for offset and limit, such that offset will default to 0 and limit will default to ∞, but in the meantime users will want to set these manually. They are set to non-default values in the examples below. For the first example, let’s query for the loon family, Gaviidae, in the bird taxonomy. Note that query parameters are case-sensitive. loon.req &lt;- GET(&quot;http://data.neonscience.org/api/v0/taxonomy/?family=Gaviidae&amp;offset=0&amp;limit=500&quot;) Parse the results into a list using fromJSON(): loon.list &lt;- jsonlite::fromJSON(content(loon.req, as=&quot;text&quot;)) And look at the $data element of the results, which contains: The full taxonomy of each taxon The short taxon code used by NEON (taxonID/acceptedTaxonID) The author of the scientific name (scientificNameAuthorship) The vernacular name, if applicable The reference text used (nameAccordingToID) The terms used for each field are matched to Darwin Core (dwc) and the Global Biodiversity Information Facility (gbif) terms, where possible, and the matches are indicated in the column headers. loon.list$data ## taxonTypeCode taxonID acceptedTaxonID dwc:scientificName ## 1 BIRD ARLO ARLO Gavia arctica ## 2 BIRD COLO COLO Gavia immer ## 3 BIRD PALO PALO Gavia pacifica ## 4 BIRD RTLO RTLO Gavia stellata ## 5 BIRD YBLO YBLO Gavia adamsii ## dwc:scientificNameAuthorship dwc:taxonRank dwc:vernacularName ## 1 (Linnaeus) species Arctic Loon ## 2 (Brunnich) species Common Loon ## 3 (Lawrence) species Pacific Loon ## 4 (Pontoppidan) species Red-throated Loon ## 5 (G. R. Gray) species Yellow-billed Loon ## dwc:nameAccordingToID dwc:kingdom dwc:phylum dwc:class dwc:order ## 1 doi: 10.1642/AUK-15-73.1 Animalia Chordata Aves Gaviiformes ## 2 doi: 10.1642/AUK-15-73.1 Animalia Chordata Aves Gaviiformes ## 3 doi: 10.1642/AUK-15-73.1 Animalia Chordata Aves Gaviiformes ## 4 doi: 10.1642/AUK-15-73.1 Animalia Chordata Aves Gaviiformes ## 5 doi: 10.1642/AUK-15-73.1 Animalia Chordata Aves Gaviiformes ## dwc:family dwc:genus gbif:subspecies gbif:variety ## 1 Gaviidae Gavia NA NA ## 2 Gaviidae Gavia NA NA ## 3 Gaviidae Gavia NA NA ## 4 Gaviidae Gavia NA NA ## 5 Gaviidae Gavia NA NA To get the entire list for a particular taxonomic type, use the taxonTypeCode query. Be cautious with this query, the PLANT taxonomic list has several hundred thousand entries. For an example, let’s look up the small mammal taxonomic list, which is one of the shorter ones, and use the verbose=true option to see a more extensive list of taxon data, including many taxon ranks that aren’t populated for these taxa. For space here, we display only the first 10 taxa: mam.req &lt;- GET(&quot;http://data.neonscience.org/api/v0/taxonomy/?taxonTypeCode=SMALL_MAMMAL&amp;offset=0&amp;limit=500&amp;verbose=true&quot;) mam.list &lt;- jsonlite::fromJSON(content(mam.req, as=&quot;text&quot;)) mam.list$data[1:10,] ## taxonTypeCode taxonID acceptedTaxonID dwc:scientificName ## 1 SMALL_MAMMAL AMHA AMHA Ammospermophilus harrisii ## 2 SMALL_MAMMAL AMIN AMIN Ammospermophilus interpres ## 3 SMALL_MAMMAL AMLE AMLE Ammospermophilus leucurus ## 4 SMALL_MAMMAL AMLT AMLT Ammospermophilus leucurus tersus ## 5 SMALL_MAMMAL AMNE AMNE Ammospermophilus nelsoni ## 6 SMALL_MAMMAL AMSP AMSP Ammospermophilus sp. ## 7 SMALL_MAMMAL APRN APRN Aplodontia rufa nigra ## 8 SMALL_MAMMAL APRU APRU Aplodontia rufa ## 9 SMALL_MAMMAL ARAL ARAL Arborimus albipes ## 10 SMALL_MAMMAL ARLO ARLO Arborimus longicaudus ## dwc:scientificNameAuthorship dwc:taxonRank ## 1 Audubon and Bachman species ## 2 Merriam species ## 3 Merriam species ## 4 Goldman subspecies ## 5 Merriam species ## 6 &lt;NA&gt; genus ## 7 Taylor subspecies ## 8 Rafinesque species ## 9 Merriam species ## 10 True species ## dwc:vernacularName taxonProtocolCategory ## 1 Harriss Antelope Squirrel opportunistic ## 2 Texas Antelope Squirrel opportunistic ## 3 Whitetailed Antelope Squirrel opportunistic ## 4 &lt;NA&gt; opportunistic ## 5 Nelsons Antelope Squirrel opportunistic ## 6 &lt;NA&gt; opportunistic ## 7 &lt;NA&gt; non-target ## 8 Sewellel non-target ## 9 Whitefooted Vole target ## 10 Red Tree Vole target ## dwc:nameAccordingToID ## 1 isbn: 978 0801882210 ## 2 isbn: 978 0801882210 ## 3 isbn: 978 0801882210 ## 4 isbn: 978 0801882210 ## 5 isbn: 978 0801882210 ## 6 isbn: 978 0801882210 ## 7 isbn: 978 0801882210 ## 8 isbn: 978 0801882210 ## 9 isbn: 978 0801882210 ## 10 isbn: 978 0801882210 ## dwc:nameAccordingToTitle ## 1 Wilson D. E. and D. M. Reeder. 2005. Mammal Species of the World; A Taxonomic and Geographic Reference. Third edition. Johns Hopkins University Press; Baltimore, MD. ## 2 Wilson D. E. and D. M. Reeder. 2005. Mammal Species of the World; A Taxonomic and Geographic Reference. Third edition. Johns Hopkins University Press; Baltimore, MD. ## 3 Wilson D. E. and D. M. Reeder. 2005. Mammal Species of the World; A Taxonomic and Geographic Reference. Third edition. Johns Hopkins University Press; Baltimore, MD. ## 4 Wilson D. E. and D. M. Reeder. 2005. Mammal Species of the World; A Taxonomic and Geographic Reference. Third edition. Johns Hopkins University Press; Baltimore, MD. ## 5 Wilson D. E. and D. M. Reeder. 2005. Mammal Species of the World; A Taxonomic and Geographic Reference. Third edition. Johns Hopkins University Press; Baltimore, MD. ## 6 Wilson D. E. and D. M. Reeder. 2005. Mammal Species of the World; A Taxonomic and Geographic Reference. Third edition. Johns Hopkins University Press; Baltimore, MD. ## 7 Wilson D. E. and D. M. Reeder. 2005. Mammal Species of the World; A Taxonomic and Geographic Reference. Third edition. Johns Hopkins University Press; Baltimore, MD. ## 8 Wilson D. E. and D. M. Reeder. 2005. Mammal Species of the World; A Taxonomic and Geographic Reference. Third edition. Johns Hopkins University Press; Baltimore, MD. ## 9 Wilson D. E. and D. M. Reeder. 2005. Mammal Species of the World; A Taxonomic and Geographic Reference. Third edition. Johns Hopkins University Press; Baltimore, MD. ## 10 Wilson D. E. and D. M. Reeder. 2005. Mammal Species of the World; A Taxonomic and Geographic Reference. Third edition. Johns Hopkins University Press; Baltimore, MD. ## dwc:kingdom gbif:subkingdom gbif:infrakingdom gbif:superdivision ## 1 Animalia NA NA NA ## 2 Animalia NA NA NA ## 3 Animalia NA NA NA ## 4 Animalia NA NA NA ## 5 Animalia NA NA NA ## 6 Animalia NA NA NA ## 7 Animalia NA NA NA ## 8 Animalia NA NA NA ## 9 Animalia NA NA NA ## 10 Animalia NA NA NA ## gbif:division gbif:subdivision gbif:infradivision gbif:parvdivision ## 1 NA NA NA NA ## 2 NA NA NA NA ## 3 NA NA NA NA ## 4 NA NA NA NA ## 5 NA NA NA NA ## 6 NA NA NA NA ## 7 NA NA NA NA ## 8 NA NA NA NA ## 9 NA NA NA NA ## 10 NA NA NA NA ## gbif:superphylum dwc:phylum gbif:subphylum gbif:infraphylum ## 1 NA Chordata NA NA ## 2 NA Chordata NA NA ## 3 NA Chordata NA NA ## 4 NA Chordata NA NA ## 5 NA Chordata NA NA ## 6 NA Chordata NA NA ## 7 NA Chordata NA NA ## 8 NA Chordata NA NA ## 9 NA Chordata NA NA ## 10 NA Chordata NA NA ## gbif:superclass dwc:class gbif:subclass gbif:infraclass gbif:superorder ## 1 NA Mammalia NA NA NA ## 2 NA Mammalia NA NA NA ## 3 NA Mammalia NA NA NA ## 4 NA Mammalia NA NA NA ## 5 NA Mammalia NA NA NA ## 6 NA Mammalia NA NA NA ## 7 NA Mammalia NA NA NA ## 8 NA Mammalia NA NA NA ## 9 NA Mammalia NA NA NA ## 10 NA Mammalia NA NA NA ## dwc:order gbif:suborder gbif:infraorder gbif:section gbif:subsection ## 1 Rodentia NA NA NA NA ## 2 Rodentia NA NA NA NA ## 3 Rodentia NA NA NA NA ## 4 Rodentia NA NA NA NA ## 5 Rodentia NA NA NA NA ## 6 Rodentia NA NA NA NA ## 7 Rodentia NA NA NA NA ## 8 Rodentia NA NA NA NA ## 9 Rodentia NA NA NA NA ## 10 Rodentia NA NA NA NA ## gbif:superfamily dwc:family gbif:subfamily gbif:tribe gbif:subtribe ## 1 NA Sciuridae Xerinae Marmotini NA ## 2 NA Sciuridae Xerinae Marmotini NA ## 3 NA Sciuridae Xerinae Marmotini NA ## 4 NA Sciuridae Xerinae Marmotini NA ## 5 NA Sciuridae Xerinae Marmotini NA ## 6 NA Sciuridae Xerinae Marmotini NA ## 7 NA Aplodontiidae &lt;NA&gt; &lt;NA&gt; NA ## 8 NA Aplodontiidae &lt;NA&gt; &lt;NA&gt; NA ## 9 NA Cricetidae Arvicolinae &lt;NA&gt; NA ## 10 NA Cricetidae Arvicolinae &lt;NA&gt; NA ## dwc:genus dwc:subgenus gbif:subspecies gbif:variety ## 1 Ammospermophilus &lt;NA&gt; NA NA ## 2 Ammospermophilus &lt;NA&gt; NA NA ## 3 Ammospermophilus &lt;NA&gt; NA NA ## 4 Ammospermophilus &lt;NA&gt; NA NA ## 5 Ammospermophilus &lt;NA&gt; NA NA ## 6 Ammospermophilus &lt;NA&gt; NA NA ## 7 Aplodontia &lt;NA&gt; NA NA ## 8 Aplodontia &lt;NA&gt; NA NA ## 9 Arborimus &lt;NA&gt; NA NA ## 10 Arborimus &lt;NA&gt; NA NA ## gbif:subvariety gbif:form gbif:subform speciesGroup dwc:specificEpithet ## 1 NA NA NA &lt;NA&gt; harrisii ## 2 NA NA NA &lt;NA&gt; interpres ## 3 NA NA NA &lt;NA&gt; leucurus ## 4 NA NA NA &lt;NA&gt; leucurus ## 5 NA NA NA &lt;NA&gt; nelsoni ## 6 NA NA NA &lt;NA&gt; sp. ## 7 NA NA NA &lt;NA&gt; rufa ## 8 NA NA NA &lt;NA&gt; rufa ## 9 NA NA NA &lt;NA&gt; albipes ## 10 NA NA NA &lt;NA&gt; longicaudus ## dwc:infraspecificEpithet ## 1 &lt;NA&gt; ## 2 &lt;NA&gt; ## 3 &lt;NA&gt; ## 4 tersus ## 5 &lt;NA&gt; ## 6 &lt;NA&gt; ## 7 nigra ## 8 &lt;NA&gt; ## 9 &lt;NA&gt; ## 10 &lt;NA&gt; To get information about a single taxon, use the scientificname query. This query will not do a ‘fuzzy match’, so you need to query the exact name of the taxon in the NEON taxonomy. Because of this, the query will be most useful when you already have NEON data in hand and are looking for more information about a specific taxon. Querying on scientificname is unlikely to be an efficient way to figure out if NEON recognizes a particular taxon. In addition, scientific names contain spaces, which are not allowed in a URL. The spaces need to be replaced with the URL encoding replacement, %20. For an example, let’s look up the little sand verbena, Abronia minor Standl. Searching for Abronia minor will fail, because the NEON taxonomy for this species includes the authority. The search will also fail with spaces. Search for Abronia%20minor%20Standl., and in this case we can omit offset and limit because we know there can only be a single result: am.req &lt;- GET(&quot;http://data.neonscience.org/api/v0/taxonomy/?scientificname=Abronia%20minor%20Standl.&quot;) am.list &lt;- jsonlite::fromJSON(content(am.req, as=&quot;text&quot;)) am.list$data ## taxonTypeCode taxonID acceptedTaxonID dwc:scientificName ## 1 PLANT ABMI2 ABMI2 Abronia minor Standl. ## dwc:scientificNameAuthorship dwc:taxonRank dwc:vernacularName ## 1 Standl. species little sand verbena ## dwc:nameAccordingToID dwc:kingdom dwc:phylum ## 1 http://plants.usda.gov (accessed 8/25/2014) Plantae Magnoliophyta ## dwc:class dwc:order dwc:family dwc:genus gbif:subspecies ## 1 Magnoliopsida Caryophyllales Nyctaginaceae Abronia NA ## gbif:variety ## 1 NA 2.14 Stacking NEON data At the top of this tutorial, we installed the neonUtilities package. This is a custom R package that stacks the monthly files provided by the NEON data portal into a single continuous file for each type of data table in the download. It currently handles files downloaded from the data portal, but not files pulled from the API. That functionality will be added soon! For a guide to using neonUtilities on data downloaded from the portal, look here. 2.15 Exercises 2.15.1 Computational 2.15.1.1 Part 1: Sign up for and Use an NEON API Token: Code to come 2.15.2 Written Question 1: How might or does the NEON project intersect with your current research or future career goals? (1 paragraph) Question 2: Use the map in week 2:Intro to NEON to answer the following questions. Consider the research question that you may explore as your final semester project or a current project that you are working on and answer each of the following questions: Are there NEON field sites that are in study regions of interest to you? What domains are the sites located in? What NEON field sites do your current research or Capstone Project ideas coincide with? Is the site or sites core or relocatable? Are they terrestrial or aquatic? Are there data available for the NEON field site(s) that you are most interested in? What kind of data are available? Question 3: Consider either your current or future research, or a question you’d like to address durring this course: Which types of NEON data may be more useful to address these questions? What non-NEON data resources could be combined with NEON data to help address your question? What challenges, if any, could you foresee when beginning to work with these data? Question 4: Use the Data Portal tools to investigate the data availability for the field sites you’ve already identified in the previous questions: What types of aquatic or terrestrial data are currently available? Remote sensing data? Of these, what type of data are you most interested in working with for your project during this course? For what time period does the data cover? What format is the downloadable file available in? Where is the metadata to support this data? Intro to NEON Culmination Activity Write up a 1-page summary of a project that you might want to explore using NEON data over the duration of this course. Include the types of NEON (and other data) that you will need to implement this project. Save this summary as you will be refining and adding to your ideas over the course of the semester. "],
["introduction-to-usa-npn-its-data.html", "Chapter 3 Introduction to USA-NPN &amp; its Data 3.1 Learning Objectives 3.2 USA-NPN Project Mission &amp; Design: 3.3 Vision &amp; Mission 3.4 USA-NPN’s Spatial design: 3.5 Types of USA-NPN Data: 3.6 How to Access USA-NPN Data: 3.7 Hands on: Accessing USA-NPN Data via rNPN 3.8 Accumulated Growing Degree Day Products 3.9 Extended Spring Indices 3.10 Exercises", " Chapter 3 Introduction to USA-NPN &amp; its Data Estimated Time: 2 hours Course participants: As you review this information, please consider the final course project that you will build upon over this semester. At the end of this section, you will document an initial research question or idea and associated data needed to address that question, that you may want to explore while pursuing this course. 3.1 Learning Objectives At the end of this activity, you will be able to: Understand the mission and purpose of the USA-National Phenology Network (USA-NPN) and the nature of the citizen science program from which the data is derived Access all of the various tools &amp; resources that are available to pull USA-NPN geospatial and observational data Effectively use the rNPN package to integrate and analyze NPN data with other similar datasets 3.2 USA-NPN Project Mission &amp; Design: The USA National Phenology Network (USA-NPN) collects, organizes, and shares phenological data and information to aid decision-making, scientific discovery, and a broader understanding of phenology from a diversity of perspectives. The USA National Phenology Network consists of a National Coordinating Office (NCO), thousands of volunteer observers and many partners, including research scientists, resource managers, educators, and policy-makers. Anyone who participates in Nature’s Notebook or collaborates with NCO staff to advance the science of phenology or to inform decisions is part of the USA-NPN. 3.3 Vision &amp; Mission USA-NPN’s vision is to provide data and information on the timing of seasonal events in plants and animals to ensure the well-being of humans, ecosystems, and natural resources. To support this and its mission the USA-NPN collects, organizes, and shares phenological data and information to aid decision-making, scientific discovery, and a broader understanding of phenology from a diversity of perspectives. 3.3.1 Relevant documents &amp; background information: USA-NPN Strategic Plan USA-NPN Information Sheet: Tracking seasonal changes to support science, natural resource management, and society 2019 USA-NPN Annual Report 3.4 USA-NPN’s Spatial design: Phenology datasets that are best suited for supporting scientific discovery and decision making are those that consist of observations of multiple life-cycle stages collected at regular intervals at the same locations over multiple years. The USA-NPN collects, stores, and shares high-quality observations of plant and animal phenology at a national scale by engaging observers in Nature’s Notebook, a national-scale, multi-taxon phenology observing program appropriate for both professional and volunteer participants. Because observations are entirely voluntary, the sampling design for observations is opportunistic. The Nature’s Notebook program has been adopted widely; data are collected at over 100 academic institutions, 78 National Ecological Observatory Network (NEON) sites, and by hundreds of researchers to contribute observations to support scientific discovery. The program is also used by tens of thousands of individual observers and members of federal, state, NGO, and private sector organizations as well as K-12 and higher-ed institutions. A unique aspect of Nature’s Notebook is that monitoring can be undertaken by individuals as well as by community or regionally-organized groups referred to as Local Phenology Programs (LPP). Organizations such as nature centers, arboreta, land conservancies, and National Wildlife Refuges use Nature’s Notebook to meet a diversity of outcomes, including asking and answering scientific questions about the impact of environmental change, informing natural resource management and decision-making, and educating and engaging the public. 3.5 Types of USA-NPN Data: 3.5.1 Observational Observational phenology data, consisting of observations made of phenological status on individual organisms, are collected and submitted by professional and citizen scientists, primarily through the USA-NPN plant and animal phenology observing program, Nature’s Notebook. These data are submitted to the USA-NPN and serve as the backbone of all USA-NPN observational data products. Observation protocols consist of status monitoring, in which observers visit a site at regular intervals to evaluate the phenological status of marked individual plants (or patches of plants) and animal species The protocols are described fully in Denny et al. (2014). In this system, phenological status is reported by yes or no answers to a series of questions, for example, “Do you see leaves?” or “Do you see active individuals?”. In addition to “Yes” or “No,” observers may also report “?”, indicating that they are uncertain of the phenophase status. Observers are also invited to document the degree to which the phenophase is expressed on an individual plant, or for animals, at a site. This intensity or abundance question takes the form of a count or percentage - for example, “95–100 percent” of a beech tree’s canopy is full with “Leaves,” or 12 “Active individual” robins are seen. USA-NPN observational data and derivative products are described in USA National Phenology Network Observational Data Documentation (Rosemartin et al. 2018). The three formats in which the USA-NPN observational data are made available include: status and intensity data, individual phenometrics, and site-level phenometrics. Visual comparison of data collected by monitoring phenological events, phenophase status, and phenophase status plus intensity. Event monitoring captures onset of a given phenophase, whereas status monitoring captures onset and duration. Status monitoring with intensity (or abundance) captures onset, duration, and magnitude of a phenophase. Examples are derived from 2012 data submitted in Nature’s Notebook for (a) sugar maple (Acer saccharum) leafing for one individual plant in Maine, and (b) forsythia flowering (Forsythia sp.) for one individual plant in Massachusetts. Each point represents one observation; black points indicate presence of the phenophase while white points indicate absence. (a) illustrates the date on which the first leaf appears (event), the period during which leaves are present (status), and the period and rate at which the canopy fills from 0 to 100 % capacity and then, empties back to 0 with leaf fall (status + intensity, circles and solid line) using estimates of canopy fullness. Also illustrated is the period and rate at which the canopy fills and empties of autumn colored leaves (status + intensity, triangles and dashed line). (b) illustrates the date on which the first open flower appears (event), the periods during which open flowers are present on the plant (status), and an estimate of the number of open flowers on the plant over the periods in which they are present (status + intensity). In both examples, the event point is calculated as the first date of the year where the phenophase was reported as present. Note that in (b) there are two distinct periods of flowering, the second of which would not have been captured using event monitoring alone. (Denny et al., 2014) 3.5.2 Status &amp; Intensity Data Status and intensity data consist of presence/absence records for individual phenophases on individual plants or species of animals at a site on a single visit. These records also include intensity and abundance measures. Individual Phenometrics and Site Phenometrics, which are synthesized sequentially from Status and Intensity data, provide estimated phenophase onset and end dates. Individual Phenometrics are derived estimates of phenophase onset and end dates for organisms within a given period of interest. Site Phenometrics are summary metrics of the onset and end date of phenophase activity across multiple individuals of the same species at a site within a given period of interest. Magnitude Phenometrics provide measures of the extent to which a phenophase is expressed across multiple individuals or sites, for a given time interval. These metrics include several approaches for capturing the shape of seasonal activity curves. In Nature’s Notebook, plants are marked and tracked through time, while animals are not, resulting in several key differences between the phenometric data types for plants and for animals. Individual Phenometrics and Site Phenometrics are nearly identical for animals, while for plants the former provide data for individual plants and the latter aggregate data across plants of the same species at a site. Magnitude Phenometrics provide additional information on animals, including correcting abundance values by search time and search area, which is not relevant for plants. As additional observational phenology data types are created by the USA-NPN, they are described at www.usanpn.org/data/new_data_products. USA-NPN Animal Phenological Data by Type from Rosemartin et al.,2018 3.5.3 Gridded Raster Data The USA-NPN offers a growing suite of gridded (raster) maps of phenological events, patterns, and trends. These products include historical, real-time, and short-term forecasts and anomalies in the timing of events such as the start of the spring season, and growing degree days. These products are described in the USA National Phenology Network gridded products documentation (Crimmins et al. 2017) Accumulated Growing Degree Days (^oF) anomaly in 2018 3.5.4 Pheno-Forecasts USA-NPN Pheno-Forecasts include real-time maps and short-term forecasts of insect pest activity at management-relevant spatial and temporal resolutions and are based on accumulated temperature thresholds associated with critical life-cycle stages of econmically important pests. Pheno Forecasts indicate, for a specified day, the status of the insect’s target life-cycle stage in real time across the contiguous United States. The maps are available for 12 insect pest species including the invasive emerald ash borer, hemlock woolly adelgid, and gypsy moth. These products are described in “Short-term forecasts of insect phenology inform pest management” (Crimmins et al. 2020) &gt; Example of USA-NPN’s Hemlock Wolly Adelgid Pheno-Forecast for August, 2020. Pheno-Forecasts are also available for an invasive grasses, such as buffelgrass. The buffelgrass Pheno-Forecast is based on known precipitation thresholds for triggering green-up to a level where management actions are most effective. These maps are updated daily and predict green-up one to two weeks in the future. 3.6 How to Access USA-NPN Data: The USA-NPN makes the data they produce available through a number of different channels and tools. This is partly driven by the format of the data; GIS data, in many ways, can and should be managed differently than observational records, which can more easily be managed in a relational database. However, the need for these different venues is also driven by end-user need. The different tiers of tools makes the data accessible to anyone regardless of their level of technical experience. This is true from the casual observer that would like to use the visualization tool to see how their contributions to citizen science relate to the broader world, all the way to the data scientist that needs simple and standard APIs to integrate USA-NPN data into larger applications and analyses. 3.6.1 The USA-NPN Landing page A concise list of all available NPN data sets, tools, products. 3.6.2 APIs This is a set of standard web service calls that allows for programmatic access to NPN data independent of any particular programming language. *Documentation *Observational Data API *GeoServer API 3.6.3 Rnpn package This suite of R functions allows for programmatic access to both gridded and in-situ NPN data sets in an R environment. Full documentation available here: https://usa-npn.github.io/rnpn/ 3.6.4 Phenology Observation Portal (for observational data) This tool allows users to download customized datasets of observational data from the National Phenology Database, which includes phenology data collected via the Nature’s Notebook phenology program (2009-present for the United States), and additional integrated datasets, such as historical lilac and honeysuckle data (1955-present). Filters are available to specify dates, regions, species and phenophases of interest. This provides access to all phenometrics, which represents varying degrees of data aggregation. 3.6.5 Geospatial Request Builder (for raster data and image files) This tool simplifies the process of accessing NPN gridded data through standard WMS and WCS services. WMS services provide the data as basic graphic images, such as PNGs or TIFFs, whereas WCS services provide the same data in formats accessible to GIS applications. 3.6.6 Visualization Tool The Visualization Tool provides an easier way to explore phenology data and maps. The user-friendly interface is intended to allow for searching for comparing general trends and quick-and-easy access to map data/products. 3.7 Hands on: Accessing USA-NPN Data via rNPN 3.7.1 Introduction The USA National Phenology Network (USA-NPN) is a USGS funded organization that collects phenological observation records from volunteer and professional scientists to better understand the impact of changes in the environment on the timing of species’ life cycles. The USA-NPN also provides a number of raster-based climatological data sets and phenological models. These in-situ observation and geospatial, modeled datasets are available through a number of tools and data services. The USA-NPN R library, “rnpn”, is primarily a data access service for USA-NPN data products, serving as a wrapper to the USA-NPN REST based web services. (link). This guide details how to use the library to access and work with all USA-NPN data types. 3.7.2 Accessing USA-NPN Observational Data USA-NPN Observational data are collected on the ground by citizen and professional observers following standardized protocols, using the Nature’s Notebook platform. The data are available 2009 to present, and come in four formats or data types: Status &amp; Intensity, Individual Phenometrics, Site Phenometrics and Magnitude Phenometrics. An overview of the differences is provided in the figure below, and each type is detailed in the following sections. For a complete description of the USA-NPN approach and notes for working with each data type see the Open File Report on USA-NPN Observational Data. In Nature’s Notebook, observers register a location, and then at each location they register any number of individual plants or animal species. The expectation is that the user then takes regular observations on each individual/species at a regular interval. Phenological status is reported by yes or no answers to a series of questions, for example, “Do you see leaves?” or “Do you see active individuals?”. In contrast to traditional monitoring of annual “first” events (for example, date of first leaf or first robin), this approach captures absence data when the phenophase is not occurring and repeat events. Each observation is comprised of a series of 1, 0 and -1 values, representing yes/no/uncertain for each possible phenophase for the plant on that date. To explore data in this native “Status and Intensity” format, see the vignette by the same name. A few considerations and functions apply across all USA-NPN Observational data types. 3.7.2.1 Basic format for for Observational data calls The basic format for an observational data call in the rnpn library is: npn_download_[NAME OF DATA TYPE] ( request_source = [NULL] year = [NULL] species_ID = [NULL] ) ‘Request source’ should usually be populated with your full name or the name of the organization you represent. Species_ID is the unique identifier for all the available plants and animals in the USA-NPN database. You can create a table of all available species and their ID numbers: species &lt;- npn_species() Search for a species by common name from the full list: species[species$common_name==&quot;red maple&quot;,] There are many parameters which can be set beyond these basic ones, depending on the data type, and further detailed in the other vignettes featured in this package. 3.7.2.2 Required Parameters Note that specifying the year(s) of interest is a required parameter. There’s also another required field, “request_source”, which is a user-provided, self-identifying string. This allows the client to provide some information about who is accessing the data. Knowing who is using the data is very helpful for our staff to report the impact of the USA-NPN to the scientific community. The input provided here is entirely honor-based. 3.7.2.3 Find stations at which a species has been observed You can also now look up which stations have a registered plant for a particular species. In the example below, we use the species ID for red maple, which we were able to find through the npn_species() function, to find all stations with that species. npn_stations_with_spp (3) 3.7.3 Status and Intensity Data The Status and Intensity data type is the most direct presentation of the phenology data stored in the NPDb. Each row is comprised of a single record of the status (1/present/“Yes”, 0/absent/“No” or -1/uncertain/“?”) of a single phenophase on an individual plant or species of animal at a site on a single site visit, as well as the estimated intensity or abundance e.g., percent canopy fullness or number of individual robins observed respectively. Retrieving this kind of data using this package is easy, and heavily parameterized. It’s possible to filter data using a number of including year, geographic extent and species. In this example we get all records of bird observations in the New England states from 2018. npn_download_status_data( request_source = &#39;Your Name Here&#39;, years = c(&#39;2018&#39;), states = c(&quot;NY&quot;,&quot;PA&quot;,&quot;VT&quot;,&quot;MA&quot;), functional_types = &#39;Bird&#39; ) ‘states’ is an example of an optional parameter that allows you to filter data based on geographic location. Another example is ‘functional_types’ which allows you to get all available data for a group of similar species (e.g., all birds, shrubs or invasive species). The best place to review all available optional filters is the autogenerated package description. Another important optional parameter is called ‘download_path’. By default requests for data from the services are returned as a data frame that gets stored in memory as a variable. In some cases, it makes more sense to save the data to file for easy and fast retrieval later. The download_path parameter allows you to specify a file path to redirect the output from the service, without having to fuss with pesky I/O operations. Additionally, requests made this way streams the data returned, so if the dataset you’re working with is particularly large, it’s possible to redirect the stream of data to file instead of loading it all into memory which can be useful if your environment doesn’t have enough RAM to store the entire data set at once. npn_download_status_data( request_source = &#39;Your Name Here&#39;, years = c(&#39;2018&#39;), functional_types = &#39;Bird&#39;, additional_fields = &#39;Site_Name&#39;, download_path =&#39;Bird_data_2018_SiteName.csv&#39; ) Using this function to get observational records is the most basic presentation of the data, and is the most robust for doing analysis, but there are a number of other products offered through the data service which provide additional value to data end users, outlined in the next vignettes. 3.7.4 Individual Phenometrics While Status and Intensity data provide a direct and complete look at the observational data, some analyses rely on more synthesized output. Individual Phenometrics are derived from phenophase status data and provide estimates of phenophase onset and end dates based on the first and last “Yes” status values for organisms within a specified season of interest. Each row in this data type is comprised of values that are derived from a string of consecutive “Yes” status reports without an intervening “No” status report for a single phenophase for an individual plant or animal species at a site, called a “series”. For plants, this data type provides information on the onset and end of a phenophase on an individual plant. For animals, it provides information on the onset and end of the presence of an animal species at a site. As animal presence at a site is much more likely to be interrupted by absence than the presence of a phenophase on a plant, Status and Intensity data or Site Phenometrics may be more appropriate for investigating animal phenology. However, we provide animal phenology in the same format as individual plants in this data type to allow users to readily compare individual plant phenology with animal activity. Note that more than one series may exist for a given phenophase in an individual plant or animal species within a single growing season or year, this might occur in the case of leaf bud break followed by a killing frost and second round of breaking leaf buds. It could also occur at group sites where two or more observers are reporting on the same plant on sequential days but are not in agreement on phenophase status. Any call for individual phenometrics requires chronological bounds, usually a calendar year, as determining onset and end depend on knowing what the time frame of interest is. If you query the services directly (without the benefit of this library) it’s possible to specify arbitrary dates, in contrast this library allows you to specify a series of calendar years as input. Here’s an example of how to query the services for individual phenometrics data. Note that the overall structure and parameters are very similar to the call for status data. The biggest difference in this case is that start and end date parameters are now replaced with a ‘years’ array, which predictably takes a set of year values with which to query the service. npn_download_individual_phenometrics( request_source=&#39;Your Name Here&#39;, years=c(2013,2014,2015,2016), species_id=c(210), download_path=&quot;saguaro_data_2013_2016.csv&quot; ) In this example, we’re able to see individual saguaro phenology for 2013 through 2016. The results returned from the service is a tabular set of records, giving start and end date by individual saguaro plant. By default, each record contains information about the location, species, phenophase, and start and end dates. Climate data from DayMet can also be acquired with Status &amp; Intensity, Individual Phenometrics and Site Phenometric data types, by setting the climate_data parameter to true. In this example, we are getting colored leaves (phenophase ID is 498) data for birches, using the four birch species IDs, for 2015: npn_download_individual_phenometrics( request_source = &#39;Your Name Here&#39;, years = c(&#39;2015&#39;), species_ids = c(97, 98, 99, 430), phenophase_ids = c(498), climate_data = TRUE, download_path = &#39;Betula_data_2015.csv&#39; ) To show what this looks like, we can plot the day of year of the first observation of colored leaves in birches (genus Betula) against summer Tmax. BetulaLeaf &lt;-read.csv( &#39;Betula_data_2015.csv&#39;, header = TRUE, na=-9999, stringsAsFactors = FALSE ) plot( first_yes_doy~tmax_summer, data=BetulaLeaf, ylab=c(&quot;Day of Year&quot;), xlab=c(&quot;Tmax Summer&quot;), cex=2, cex.axis=1.5, cex.lab=1.5, pch=21 ) 3.7.5 Site Phenometrics Site Phenometrics, derived from Individual Phenometrics, provide summary metrics of the onset and end date of phenophase activity for a species at a site. Observers are directed to create sites that represent uniform habitat and are no larger than 15 acres. For plants, this metric is calculated as an average for all individuals of a species at the site. For animals, where individuals are not tracked, this metric represents the first and last recorded appearance of the species during the season of interest. For instance, if you asked for red maple leafing data, and there was a site with three red maple trees being observed, then the data would be the average onset date for all three of those red maple trees at that site. Here’s an example of how to query the services for site phenometrics data, for cloned lilacs, breaking leaf buds, 2013. The call is very similar to the call for individual phenometrics data, however, in addition you can supply the quality control filter for the number of days between a yes record and preceding no record (also applies to the last yes and following no), for the observation to be included in the calculations. Typically this is set to 7, 14 or 30, as when downloading data using the USA-NPN Phenology Observation Portal. If you do not set this parameter, it defaults to 30 days. Note that in this example the results are stored in memory, rather than output as a file. LilacLeafPoints2013&lt;-npn_download_site_phenometrics( request_source = &#39;Your Name Here&#39;, years = c(&#39;2013&#39;), num_days_quality_filter = &#39;30&#39;, species_ids = &#39;35&#39;, phenophase_ids = &#39;373&#39; ) In this example we’re able to see the date of the first observation of breaking leaf buds for cloned lilacs, averaged across individuals within sites. If any observation did not have a preceding no record within 30 days it was excluded from the calculations. We can now plot our cloned lilac site phenometric onset data by latitude. plot( mean_first_yes_doy~latitude, data=LilacLeafPoints2013, ylab=c(&quot;Day of Year&quot;), xlab=c(&quot;Latitude&quot;), cex=2, cex.axis=1.5, cex.lab=1.5, pch=21, xlim=c(30,55), ylim=c(0,200) ) 3.7.6 Magnitude Phenometrics Magnitude Phenometrics are a suite of eight metrics derived from Status and Intensity data. This data type provides information on the extent to which a phenophase is expressed across multiple individuals or sites, for a given set of sequential time intervals. The data user may select a weekly, bi-weekly, monthly, or custom time interval to summarize the metrics. Two metrics are available for both plants and animals, one metric is available for plants alone and five metrics are available for animals alone (table 1). Three of the five animal metrics correct animal abundance values for observer effort in time and space. Here’s an example of how to query for Magnitude Phenometrics, for the active individuals phenophase for black-capped chickadee data, in 2018. Requirements are similar to other data types. You must additionally specify the time interval by which the data should be summarized. Typically this is weekly, biweekly or monthly, as in the POP and Visualization Tool. The interval chosen in this example is 7 days. npn_download_magnitude_phenometrics( request_source = &#39;Your Name Here&#39;, years = &#39;2018&#39;, period_frequency = &quot;7&quot;, species_ids = &#39;245&#39;, phenophase_ids = &#39;292&#39;, download_path = &#39;MPM_BCC_ActInd_2018.csv&#39; ) In this example we’re able to see all of the magnitude phenometric fields, including proportion_yes_records, and mean_num_animals_in-phase. See the https://pubs.usgs.gov/of/2018/1060/ofr20181060.pdf for full field descriptions. From this dataset we can view the Proportion_Yes_Records (of all the records submitted on this species, what proportion are positive/yes records) by weekly interval: BCC_AI&lt;-read.csv( &#39;MPM_BCC_ActInd_2018.csv&#39;, header = TRUE, na=-9999, stringsAsFactors = FALSE ) plot( BCC_AI$proportion_yes_record~as.Date(BCC_AI$start_date,&quot;%Y-%m-%d&quot;), ylab=c(&quot;Proportion Yes Records&quot;), xlab=c(&quot;Date&quot;), cex=2, cex.axis=1.5, cex.lab=1.5, pch=21, xlim=as.Date(c(&quot;2018-01-01&quot;, &quot;2018-08-01&quot;)), ylim=c(0,1) ) 3.7.7 USA-NPN Geospatial Data USA-NPN provides phenology-relevant climate data in raster format. There are two main suites of products in this category: Accumulated Growing Degree Days and Extended Spring Indices. Accumulated Growing Degree Days and the Extended Spring Indices are both representations of accumulated temperature. As accumulated winter and spring heat drives many spring season phenological events in much of the country, these products can be used to better understand patterns in the current and historical timing of these events across the landscape. For a complete description of the USA-NPN approach and notes for working with each data type see the Open File Report on USA-NPN Gridded Data. Both suites are available as: Current year value, with a 6-day forecast Current year anomaly, with a 6-day forecast Long-term (30 year) average Historical years AGDD - 2016-Prior Year Extended Spring Index - 1880-Prior Year All of these products can be downloaded using the npn_download_geospatial call. There is a number of other products and permutations of the above listed AGDD and Spring Index products, so you can get a complete list of available layers and additional details about them including resolution, extent and the abstract/layer description. layers &lt;- npn_get_layer_details() The following sections describe how to parameterize calls for both AGDD and Spring Index layers. These calls result in raster data sets for the contiguous United States. If you are interested in how many GDDs had accumulated when the red maple in your backyard leafed out, or what day the Spring Index requirements for leaf out were met for your location, you may wish to query the layers for these values, based on location and date. There are two ways to accomplish this, using the npn_get_point_data function which works for all layers and the npn_get_AGDD_point_data function, which only works for AGDD layers and provides a more precise result. npn_get_agdd_point_data( &#39;gdd:agdd_50f&#39;, &#39;38&#39;, &#39;-90&#39;, &#39;2019-02-25&#39; ) This returns a value of 7.64098 GDD, base 50F, for the coordinates 38 north, -90 west on February 25th, 2019. npn_get_point_data( &#39;si-x:lilac_bloom_ncep&#39;, &#39;30&#39;, &#39;-90&#39;, &#39;2019-02-25&#39; ) This returns a value for lilac bloom of day 48, for the coordinates 30 north, -90 west, as of February 25th, 2019. The above mentioned AGDD products use base temperatures of 32F or 50F and are managed through WCS services. There is also a function to get dynamic AGDD calculations based on a user defined base temperature and a number of other parameters. custom_agdd_raster &lt;- npn_get_custom_agdd_raster( method = &#39;double-sine&#39;, climate_data_source = &#39;NCEP&#39;, temp_unit = &#39;fahrenheit&#39;, start_date = &#39;2019-01-01&#39;, end_date = &#39;2019-05-10&#39;, base_temp = 20, upper_threshold = 90 ) 3.8 Accumulated Growing Degree Day Products Heat accumulation is commonly used as a way of predicting the timing of phenological transitions in plants and animals, including when plants exhibit leaf out, flowering, or fruit ripening, or when insects emerge from dormancy. This is typically expressed as accumulated heat units, either Growing Degree Hours or Growing Degree Days. Growing degree day thresholds have been established for many species, and are commonly used in agriculture, horticulture, and pest management to schedule activities such as harvesting, pesticide treatment, and flower collection. The USA-NPN is currently generating Accumulated Growing Degree Days (AGDD) rasters using a January 1 start date, calculated using simple averaging. These are available calculated using two base temperatures, 32 degrees Fahrenheit (F) and 50 F. When querying certain layers, the underlying data is agnostic about the specific year, and in these cases it makes sense to use the day of year to request data, since that will provide a standardized result, (i.e., April 1st is day 91 in some years and day 92 in others). npn_download_geospatial( &#39;gdd:30yr_avg_agdd_50f&#39;, 95 ) But if you’re looking at a specific year, such as a current year layer, it makes sense to use a specific calendar date (formatted YYYY-MM-DD). It’s also possible to save the raster directly to file instead of loading it into memory. npn_download_geospatial( &#39;gdd:agdd&#39;, &#39;2018-05-05&#39;, output_path=&#39;20180505-agdd-value.tiff&#39; ) In the case of the historic Spring Index layers, however, the product represents the overall outcome for the entire year, so while the year component of the date matters, the month and day do not. In this case, specify January 1 as the month and date. npn_download_geospatial( &quot;si-x:average_bloom_prism&quot;, &quot;1995-01-01&quot; ) The dimension.range value, returned in the npn_get_layer_details() function, clarifies the full set of applicable dates for each layer. Of course, it’s also easy to grab raster data and load it into a visual plot as in this example, showing a map of AGDD base 50 on 2019-06-25: AGDDJun2019&lt;-npn_download_geospatial( &#39;gdd:agdd_50f&#39;, &#39;2019-06-25&#39; ) plot( AGDDJun2019, main = &quot;AGDD base 50 on June 25th, 2019&quot; ) An important layer to know of is the 30 year average for AGDD products. This is useful for many comparative analyses. This layer takes DOY as the date input, since it’s the average AGDD value for each day of year for 1981 - 2010. average_30yr &lt;- npn_download_geospatial( &quot;gdd:30yr_avg_agdd&quot;, 45 ) 3.9 Extended Spring Indices The Extended Spring Indices are mathematical models that predict the “start of spring” (timing of first leaf or first bloom) at a particular location. These models were constructed using historical observations of the timing of first leaf and first bloom in a cloned lilac cultivar (Syringa X chinensis ‘Red Rothomagensis’) and two cloned honeysuckle cultivars (Lonicera tatarica L. ‘Arnold Red’ and Lonicera korolkowii Stapf, also known as ‘Zabelii’), which were selected based on the availability of historical observations from across a wide geographic area. Primary inputs to the model are temperature and weather events, beginning January 1 of each year. The model outputs are first leaf and first bloom date for a given location. Data for the Spring Index is available through an enumeration of layers that represents each of the three sub-models as well as an ‘average’ model which represents the aggregation of the three sub-models. These layers are further enumerated by both of the represented phenophases, leaf and bloom. In the example below, first the layer representing only the Arnold Red model for 1987 is retrieved, while the second function call gets the model averaging all three of the models for the same year. npn_download_geospatial( &quot;si-x:arnoldred_bloom_prism&quot;, &quot;1987-01-01&quot; ) average_model &lt;- npn_download_geospatial( &quot;si-x:average_bloom_prism&quot;, &quot;1987-01-01&quot; ) The Spring Indices are also unique in that the algorithm has been run against the BEST climate data set, so historic data going back to 1880 is available. BESTSIxData1905 &lt;- npn_download_geospatial( &#39;si-x:average_bloom_best&#39;, &#39;1905-01-01&#39; ) NAvalue(BESTSIxData1905) &lt;- -9999 plot( BESTSIxData1905, main = &quot;Spring Index, 1905&quot; ) 3.9.1 Other Layers Besides the AGDD and Spring Index layers there are a number of other useful layers available through these services, including daily temperature minimum and maximums and aggregated MODISv6 phenometrics. The daily temperature minimum and maximum values are the underlying climate data used to generate current year AGDD and Spring Index maps. These data are generated by NOAA’s National Centers for Environmental Prediction (NCEP) and are reserved through NPN’s geospatial services. daily_max_20190505 &lt;- npn_download_geospatial( &#39;climate:tmax&#39;, &#39;2019-05-05&#39; ) plot( daily_max_20190505, main = &quot;Daily Temperature Max (C), May 5th, 2019&quot; ) The MODISv6 layers are aggregate values for remote sensing values from the MODISv6 data set, representing a subset of the following phenometrics, aggregated across 2001 - 2017: EVI Area, Mid-Greenup, Mid-Greendown. The available aggregate values for each layer are: median, TSslope, and mean absolute deviation. This example shows the median green up value, as DOY. Note that because this layer has a fixed date, the date parameter is input as a blank string. median_greenup &lt;- npn_download_geospatial( &#39;inca:midgup_median_nad83_02deg&#39;, &#39;&#39; ) plot( median_greenup, main = &quot;MODIS Median Mid-Greenup, 2001 - 2017&quot; ) 3.10 Exercises 3.10.1 Computational 3.10.1 Written Question 1: How might or does USA-NPN intersect with your current research or future career goals? (1 paragraph) Question 2: Question 4: Intro to USA-NPN Culmination Activity Write up a 1-page summary of a project that you might want to explore using USA-NPN data over the duration of this course. Include the types of USA-NPN (and other data) that you will need to implement this project. Save this summary as you will be refining and adding to your ideas over the course of the semester. "],
["neon-aop-introduction.html", "Chapter 4 NEON AOP Introduction 4 Learning Objectives 4.1 About Hyperspectral Remote Sensing Data 4.2 Key Metadata for Hyperspectral Data", " Chapter 4 NEON AOP Introduction Estimated Time: .25-.5 hours 4 Learning Objectives After completing this tutorial, you will be able to: Define hyperspectral remote sensing. Explain the fundamental principles of hyperspectral remote sensing data. Describe the key attributes that are required to effectively work with hyperspectral remote sensing data in tools like R or Python. Describe what a “band” is. 4.0.0.1 Mapping the Invisible 4.1 About Hyperspectral Remote Sensing Data The electromagnetic spectrum is composed of thousands of bands representing different types of light energy. Imaging spectrometers (instruments that collect hyperspectral data) break the electromagnetic spectrum into groups of bands that support classification of objects by their spectral properties on the earth’s surface. Hyperspectral data consists of many bands – up to hundreds of bands – that cover the electromagnetic spectrum. The NEON imaging spectrometer collects data within the 380nm to 2510nm portions of the electromagnetic spectrum within bands that are approximately 5nm in width. This results in a hyperspectral data cube that contains approximately 426 bands - which means big, big data. 4.2 Key Metadata for Hyperspectral Data 4.2.1 Bands and Wavelengths A band represents a group of wavelengths. For example, the wavelength values between 695nm and 700nm might be one band as captured by an imaging spectrometer. The imaging spectrometer collects reflected light energy in a pixel for light in that band. Often when you work with a multi or hyperspectral dataset, the band information is reported as the center wavelength value. This value represents the center point value of the wavelengths represented in that band. Thus in a band spanning 695-700 nm, the center would be 697.5). Imaging spectrometers collect reflected light information within defined bands or regions of the electromagnetic spectrum. Source: National Ecological Observatory Network (NEON) 4.2.2 Spectral Resolution The spectral resolution of a dataset that has more than one band, refers to the width of each band in the dataset. In the example above, a band was defined as spanning 695-700nm. The width or spatial resolution of the band is thus 5 nanometers. To see an example of this, check out the band widths for the Landsat sensors. 4.2.3 Full Width Half Max (FWHM) The full width half max (FWHM) will also often be reported in a multi or hyperspectral dataset. This value represents the spread of the band around that center point. The Full Width Half Max (FWHM) of a band relates to the distance in nanometers between the band center and the edge of the band. In this case, the FWHM for Band C is 5 nm. In the illustration above, the band that covers 695-700nm has a FWHM of 5 nm. While a general spectral resolution of the sensor is often provided, not all sensors create bands of uniform widths. For instance bands 1-9 of Landsat 8 are listed below (Courtesy of USGS) Band Wavelength range (microns) Spatial Resolution (m) Spectral Width (microns) Band 1 - Coastal aerosol 0.43 - 0.45 30 0.02 Band 2 - Blue 0.45 - 0.51 30 0.06 Band 3 - Green 0.53 - 0.59 30 0.06 Band 4 - Red 0.64 - 0.67 30 0.03 Band 5 - Near Infrared (NIR) 0.85 - 0.88 30 0.03 Band 6 - SWIR 1 1.57 - 1.65 30 0.08 Band 7 - SWIR 2 2.11 - 2.29 30 0.18 Band 8 - Panchromatic 0.50 - 0.68 15 0.18 Band 9 - Cirrus 1.36 - 1.38 30 0.02 "]
]
